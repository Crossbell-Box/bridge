// Code generated by mockery v2.12.1. DO NOT EDIT.

package mocks

import (
	big "math/big"

	common "github.com/ethereum/go-ethereum/common"
	mock "github.com/stretchr/testify/mock"

	testing "testing"

	types "github.com/axieinfinity/bridge-v2/internal/types"
)

// IJob is an autogenerated mock type for the IJob type
type IJob struct {
	mock.Mock
}

// FromChainID provides a mock function with given fields:
func (_m *IJob) FromChainID() *big.Int {
	ret := _m.Called()

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func() *big.Int); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	return r0
}

// GetBackOff provides a mock function with given fields:
func (_m *IJob) GetBackOff() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetData provides a mock function with given fields:
func (_m *IJob) GetData() []byte {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// GetID provides a mock function with given fields:
func (_m *IJob) GetID() int32 {
	ret := _m.Called()

	var r0 int32
	if rf, ok := ret.Get(0).(func() int32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int32)
	}

	return r0
}

// GetListener provides a mock function with given fields:
func (_m *IJob) GetListener() types.IListener {
	ret := _m.Called()

	var r0 types.IListener
	if rf, ok := ret.Get(0).(func() types.IListener); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.IListener)
		}
	}

	return r0
}

// GetMaxTry provides a mock function with given fields:
func (_m *IJob) GetMaxTry() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetNextTry provides a mock function with given fields:
func (_m *IJob) GetNextTry() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// GetRetryCount provides a mock function with given fields:
func (_m *IJob) GetRetryCount() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetSubscriptionName provides a mock function with given fields:
func (_m *IJob) GetSubscriptionName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetTransaction provides a mock function with given fields:
func (_m *IJob) GetTransaction() types.ITransaction {
	ret := _m.Called()

	var r0 types.ITransaction
	if rf, ok := ret.Get(0).(func() types.ITransaction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.ITransaction)
		}
	}

	return r0
}

// GetType provides a mock function with given fields:
func (_m *IJob) GetType() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetValue provides a mock function with given fields:
func (_m *IJob) GetValue() *big.Int {
	ret := _m.Called()

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func() *big.Int); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	return r0
}

// Hash provides a mock function with given fields:
func (_m *IJob) Hash() common.Hash {
	ret := _m.Called()

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func() common.Hash); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	return r0
}

// IncreaseRetryCount provides a mock function with given fields:
func (_m *IJob) IncreaseRetryCount() {
	_m.Called()
}

// Process provides a mock function with given fields:
func (_m *IJob) Process() ([]byte, error) {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields:
func (_m *IJob) Save() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: _a0
func (_m *IJob) Update(_a0 string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateNextTry provides a mock function with given fields: _a0
func (_m *IJob) UpdateNextTry(_a0 int64) {
	_m.Called(_a0)
}

// NewIJob creates a new instance of IJob. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewIJob(t testing.TB) *IJob {
	mock := &IJob{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
