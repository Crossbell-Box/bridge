// Code generated by mockery v2.12.1. DO NOT EDIT.

package mocks

import (
	common "github.com/ethereum/go-ethereum/common"
	mock "github.com/stretchr/testify/mock"

	testing "testing"

	types "github.com/axieinfinity/bridge-v2/internal/types"
)

// IBlock is an autogenerated mock type for the IBlock type
type IBlock struct {
	mock.Mock
}

// GetHash provides a mock function with given fields:
func (_m *IBlock) GetHash() common.Hash {
	ret := _m.Called()

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func() common.Hash); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	return r0
}

// GetHeight provides a mock function with given fields:
func (_m *IBlock) GetHeight() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// GetReceipts provides a mock function with given fields:
func (_m *IBlock) GetReceipts() []types.IReceipt {
	ret := _m.Called()

	var r0 []types.IReceipt
	if rf, ok := ret.Get(0).(func() []types.IReceipt); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.IReceipt)
		}
	}

	return r0
}

// GetTransactions provides a mock function with given fields:
func (_m *IBlock) GetTransactions() []types.ITransaction {
	ret := _m.Called()

	var r0 []types.ITransaction
	if rf, ok := ret.Get(0).(func() []types.ITransaction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.ITransaction)
		}
	}

	return r0
}

// NewIBlock creates a new instance of IBlock. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewIBlock(t testing.TB) *IBlock {
	mock := &IBlock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
