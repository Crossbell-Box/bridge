// Code generated by mockery v2.12.1. DO NOT EDIT.

package mocks

import (
	context "context"
	big "math/big"

	common "github.com/ethereum/go-ethereum/common"

	coretypes "github.com/ethereum/go-ethereum/core/types"

	mock "github.com/stretchr/testify/mock"

	models "github.com/axieinfinity/bridge-v2/internal/models"

	testing "testing"

	time "time"

	types "github.com/axieinfinity/bridge-v2/internal/types"

	utils "github.com/axieinfinity/bridge-v2/internal/utils"
)

// IListener is an autogenerated mock type for the IListener type
type IListener struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *IListener) Close() {
	_m.Called()
}

// Config provides a mock function with given fields:
func (_m *IListener) Config() *types.LsConfig {
	ret := _m.Called()

	var r0 *types.LsConfig
	if rf, ok := ret.Get(0).(func() *types.LsConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.LsConfig)
		}
	}

	return r0
}

// Context provides a mock function with given fields:
func (_m *IListener) Context() context.Context {
	ret := _m.Called()

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// GetBlock provides a mock function with given fields: height
func (_m *IListener) GetBlock(height uint64) (types.IBlock, error) {
	ret := _m.Called(height)

	var r0 types.IBlock
	if rf, ok := ret.Get(0).(func(uint64) types.IBlock); ok {
		r0 = rf(height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.IBlock)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockWithLogs provides a mock function with given fields: height
func (_m *IListener) GetBlockWithLogs(height uint64) (types.IBlock, error) {
	ret := _m.Called(height)

	var r0 types.IBlock
	if rf, ok := ret.Get(0).(func(uint64) types.IBlock); ok {
		r0 = rf(height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.IBlock)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChainID provides a mock function with given fields:
func (_m *IListener) GetChainID() (*big.Int, error) {
	ret := _m.Called()

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func() *big.Int); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCurrentBlock provides a mock function with given fields:
func (_m *IListener) GetCurrentBlock() types.IBlock {
	ret := _m.Called()

	var r0 types.IBlock
	if rf, ok := ret.Get(0).(func() types.IBlock); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.IBlock)
		}
	}

	return r0
}

// GetEthClient provides a mock function with given fields:
func (_m *IListener) GetEthClient() utils.EthClient {
	ret := _m.Called()

	var r0 utils.EthClient
	if rf, ok := ret.Get(0).(func() utils.EthClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(utils.EthClient)
		}
	}

	return r0
}

// GetInitHeight provides a mock function with given fields:
func (_m *IListener) GetInitHeight() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// GetLatestBlock provides a mock function with given fields:
func (_m *IListener) GetLatestBlock() (types.IBlock, error) {
	ret := _m.Called()

	var r0 types.IBlock
	if rf, ok := ret.Get(0).(func() types.IBlock); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.IBlock)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestBlockHeight provides a mock function with given fields:
func (_m *IListener) GetLatestBlockHeight() (uint64, error) {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetListenHandleJob provides a mock function with given fields: subscriptionName, tx, eventId, data
func (_m *IListener) GetListenHandleJob(subscriptionName string, tx types.ITransaction, eventId string, data []byte) types.IJob {
	ret := _m.Called(subscriptionName, tx, eventId, data)

	var r0 types.IJob
	if rf, ok := ret.Get(0).(func(string, types.ITransaction, string, []byte) types.IJob); ok {
		r0 = rf(subscriptionName, tx, eventId, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.IJob)
		}
	}

	return r0
}

// GetName provides a mock function with given fields:
func (_m *IListener) GetName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetReceipt provides a mock function with given fields: _a0
func (_m *IListener) GetReceipt(_a0 common.Hash) (*coretypes.Receipt, error) {
	ret := _m.Called(_a0)

	var r0 *coretypes.Receipt
	if rf, ok := ret.Get(0).(func(common.Hash) *coretypes.Receipt); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coretypes.Receipt)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Hash) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSafeBlockRange provides a mock function with given fields:
func (_m *IListener) GetSafeBlockRange() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// GetStore provides a mock function with given fields:
func (_m *IListener) GetStore() types.IMainStore {
	ret := _m.Called()

	var r0 types.IMainStore
	if rf, ok := ret.Get(0).(func() types.IMainStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.IMainStore)
		}
	}

	return r0
}

// GetSubscriptions provides a mock function with given fields:
func (_m *IListener) GetSubscriptions() map[string]*types.Subscribe {
	ret := _m.Called()

	var r0 map[string]*types.Subscribe
	if rf, ok := ret.Get(0).(func() map[string]*types.Subscribe); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*types.Subscribe)
		}
	}

	return r0
}

// GetTask provides a mock function with given fields:
func (_m *IListener) GetTask() types.ITask {
	ret := _m.Called()

	var r0 types.ITask
	if rf, ok := ret.Get(0).(func() types.ITask); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.ITask)
		}
	}

	return r0
}

// IsDisabled provides a mock function with given fields:
func (_m *IListener) IsDisabled() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewJobFromDB provides a mock function with given fields: job
func (_m *IListener) NewJobFromDB(job *models.Job) (types.IJob, error) {
	ret := _m.Called(job)

	var r0 types.IJob
	if rf, ok := ret.Get(0).(func(*models.Job) types.IJob); ok {
		r0 = rf(job)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.IJob)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.Job) error); ok {
		r1 = rf(job)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Period provides a mock function with given fields:
func (_m *IListener) Period() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// SaveCurrentBlockToDB provides a mock function with given fields:
func (_m *IListener) SaveCurrentBlockToDB() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveTransactionsToDB provides a mock function with given fields: txs
func (_m *IListener) SaveTransactionsToDB(txs []types.ITransaction) error {
	ret := _m.Called(txs)

	var r0 error
	if rf, ok := ret.Get(0).(func([]types.ITransaction) error); ok {
		r0 = rf(txs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendCallbackJobs provides a mock function with given fields: listeners, subscriptionName, tx, inputData
func (_m *IListener) SendCallbackJobs(listeners map[string]types.IListener, subscriptionName string, tx types.ITransaction, inputData []byte) {
	_m.Called(listeners, subscriptionName, tx, inputData)
}

// SetInitHeight provides a mock function with given fields: _a0
func (_m *IListener) SetInitHeight(_a0 uint64) {
	_m.Called(_a0)
}

// Start provides a mock function with given fields:
func (_m *IListener) Start() {
	_m.Called()
}

// UpdateCurrentBlock provides a mock function with given fields: block
func (_m *IListener) UpdateCurrentBlock(block types.IBlock) error {
	ret := _m.Called(block)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.IBlock) error); ok {
		r0 = rf(block)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIListener creates a new instance of IListener. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewIListener(t testing.TB) *IListener {
	mock := &IListener{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
