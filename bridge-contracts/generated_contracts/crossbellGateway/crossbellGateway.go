// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package crossbellGateway

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// DataTypesDepositEntry is an auto generated low-level Go binding around an user-defined struct.
type DataTypesDepositEntry struct {
	ChainId   *big.Int
	Recipient common.Address
	Token     common.Address
	Amount    *big.Int
}

// DataTypesMappedToken is an auto generated low-level Go binding around an user-defined struct.
type DataTypesMappedToken struct {
	Token    common.Address
	Decimals uint8
}

// DataTypesWithdrawalEntry is an auto generated low-level Go binding around an user-defined struct.
type DataTypesWithdrawalEntry struct {
	ChainId   *big.Int
	Recipient common.Address
	Token     common.Address
	Amount    *big.Int
	Fee       *big.Int
}

// CrossbellGatewayMetaData contains all meta data concerning the CrossbellGateway contract.
var CrossbellGatewayMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AckDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"withdrawalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"RequestWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"withdrawalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"SubmitWithdrawalSignature\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"crossbellTokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"chainIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"mainchainTokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"mainchainTokenDecimals\",\"type\":\"uint8[]\"}],\"name\":\"TokenMapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"depositHash\",\"type\":\"bytes32\"}],\"name\":\"ackDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"chainIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"depositIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"depositHashes\",\"type\":\"bytes32[]\"}],\"name\":\"batchAckDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"chainIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"withdrawalIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"sigs\",\"type\":\"bytes[]\"}],\"name\":\"batchSubmitWithdrawalSignatures\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"getAcknowledgementCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"getAcknowledgementStatus\",\"outputs\":[{\"internalType\":\"enumDataTypes.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"}],\"name\":\"getDepositEntry\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"structDataTypes.DepositEntry\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"crossbellToken\",\"type\":\"address\"}],\"name\":\"getMainchainToken\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"structDataTypes.MappedToken\",\"name\":\"token\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"getValidatorAcknowledgementHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidatorContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"getWithdrawalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawalId\",\"type\":\"uint256\"}],\"name\":\"getWithdrawalEntry\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"internalType\":\"structDataTypes.WithdrawalEntry\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawalId\",\"type\":\"uint256\"}],\"name\":\"getWithdrawalSignatures\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"sigs\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"crossbellTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"chainIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"mainchainTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"mainchainTokenDecimals\",\"type\":\"uint8[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"crossbellTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"chainIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"mainchainTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"mainchainTokenDecimals\",\"type\":\"uint8[]\"}],\"name\":\"mapTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"requestWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawalId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawalId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"submitWithdrawalSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50600180556002805460ff191690556131cd8061002e6000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c806375b238fc11610104578063a26b2906116100a2578063d547741f11610071578063d547741f14610535578063d587cc6014610548578063daaf394a14610582578063e5001d7c146105c457600080fd5b8063a26b2906146104bf578063b8d5c2e6146104d2578063bde268a11461050f578063ca15c8731461052257600080fd5b80638456cb59116100de5780638456cb59146104895780639010d07c1461049157806391d14854146104a4578063a217fddf146104b757600080fd5b806375b238fc146104225780637a597ecc1461043757806380f3603a1461046957600080fd5b80633e397b0311610171578063477a4ad41161014b578063477a4ad41461038157806353f809b1146103945780635c975abb146103f25780636f94c5e9146103fd57600080fd5b80633e397b03146103455780633f4ba83a1461035857806343fb02c71461036057600080fd5b8063248a9ca3116101ad578063248a9ca3146102245780632f2ff15d1461025557806336568abe146102685780633a9e66131461027b57600080fd5b806301ffc9a7146101d45780630dfd6d30146101fc578063210a647714610211575b600080fd5b6101e76101e2366004612525565b6105d7565b60405190151581526020015b60405180910390f35b61020f61020a36600461259a565b610602565b005b61020f61021f36600461265d565b61063b565b61024761023236600461279a565b60009081526003602052604090206001015490565b6040519081526020016101f3565b61020f6102633660046127cf565b610796565b61020f6102763660046127cf565b6107c0565b6103046102893660046127fb565b60408051608080820183526000808352602080840182905283850182905260609384018290529581526005865283812094815293855292829020825193840183528054845260018101546001600160a01b03908116958501959095526002810154909416918301919091526003909201549181019190915290565b60408051825181526020808401516001600160a01b0390811691830191909152838301511691810191909152606091820151918101919091526080016101f3565b61020f61035336600461281d565b61083e565b61020f610860565b61037361036e3660046127fb565b61088b565b6040516101f39291906128f4565b61020f61038f366004612995565b610a0e565b6103a76103a23660046127fb565b610a45565b60408051825181526020808401516001600160a01b0390811691830191909152838301511691810191909152606080830151908201526080918201519181019190915260a0016101f3565b60025460ff166101e7565b600b546001600160a01b03165b6040516001600160a01b0390911681526020016101f3565b61024760008051602061317883398151915281565b6102476104453660046129ed565b6000928352600d602090815260408085209385529281528284209184525290205490565b61024761047736600461279a565b60009081526006602052604090205490565b61020f610aed565b61040a61049f3660046127fb565b610b15565b6101e76104b23660046127cf565b610b34565b610247600081565b61020f6104cd366004612a19565b610b5f565b6102476104e0366004612b00565b6000928352600c602090815260408085209385529281528284206001600160a01b039290921684525290205490565b61020f61051d366004612b35565b610cc6565b61024761053036600461279a565b610d84565b61020f6105433660046127cf565b610d9b565b61055b6105563660046127cf565b610dc0565b6040805182516001600160a01b0316815260209283015160ff1692810192909252016101f3565b6105b76105903660046129ed565b6000928352600e602090815260408085209385529281528284209184525290205460ff1690565b6040516101f39190612be4565b6102476105d2366004612c0c565b610dde565b60006001600160e01b03198216635a05180f60e01b14806105fc57506105fc8261107f565b92915050565b60008051602061317883398151915261061a816110b4565b87156106305761063089898989898989896110be565b505050505050505050565b610643611278565b61064b6112d2565b61065361131a565b8a8914801561066157508a87145b801561066c57508a85145b801561067757508a83145b801561068257508a81145b6106a75760405162461bcd60e51b815260040161069e90612c5a565b60405180910390fd5b60005b8981101561077e5761076c8d8d838181106106c7576106c7612c86565b905060200201358c8c848181106106e0576106e0612c86565b905060200201358b8b858181106106f9576106f9612c86565b905060200201602081019061070e9190612c9c565b8a8a8681811061072057610720612c86565b90506020020160208101906107359190612c9c565b89898781811061074757610747612c86565b9050602002013588888881811061076057610760612c86565b905060200201356113cf565b8061077681612ccd565b9150506106aa565b5061078860018055565b505050505050505050505050565b6000828152600360205260409020600101546107b1816110b4565b6107bb838361161b565b505050565b6001600160a01b03811633146108305760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161069e565b61083a828261163d565b5050565b6108466112d2565b61084e61131a565b61085a8484848461165f565b50505050565b6108686117c5565b600080516020613178833981519152610880816110b4565b61088861180e565b50565b6060806108988484611860565b915081516001600160401b038111156108b3576108b3612ce8565b6040519080825280602002602001820160405280156108e657816020015b60608152602001906001900390816108d15790505b50905060005b8251811015610a065760008581526008602090815260408083208784529091528120845190919085908490811061092557610925612c86565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020805461095890612cfe565b80601f016020809104026020016040519081016040528092919081815260200182805461098490612cfe565b80156109d15780601f106109a6576101008083540402835291602001916109d1565b820191906000526020600020905b8154815290600101906020018083116109b457829003601f168201915b50505050508282815181106109e8576109e8612c86565b602002602001018190525080806109fe90612ccd565b9150506108ec565b509250929050565b610a16611278565b610a1e6112d2565b610a2661131a565b610a348686868686866113cf565b610a3d60018055565b505050505050565b610a896040518060a001604052806000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001600081525090565b50600091825260076020908152604080842092845291815291819020815160a0810183528154815260018201546001600160a01b03908116948201949094526002820154909316918301919091526003810154606083015260040154608082015290565b610af56112d2565b600080516020613178833981519152610b0d816110b4565b6108886118d5565b6000828152600460205260408120610b2d9083611912565b9392505050565b60009182526003602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600054610100900460ff1615808015610b7f5750600054600160ff909116105b80610b995750303b158015610b99575060005460ff166001145b610bfc5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161069e565b6000805460ff191660011790558015610c1f576000805461ff0019166101001790555b600b80546001600160a01b0319166001600160a01b038d161790558715610c5057610c5089898989898989896110be565b610c5b60008b61191e565b610c736000805160206131788339815191528b61191e565b8015610cb9576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050505050565b610cce6112d2565b610cd661131a565b8483148015610ce457508481145b610d005760405162461bcd60e51b815260040161069e90612c5a565b60005b85811015610d7b57610d69878783818110610d2057610d20612c86565b90506020020135868684818110610d3957610d39612c86565b90506020020135858585818110610d5257610d52612c86565b9050602002810190610d649190612d39565b61165f565b80610d7381612ccd565b915050610d03565b50505050505050565b60008181526004602052604081206105fc90611928565b600082815260036020526040902060010154610db6816110b4565b6107bb838361163d565b6040805180820190915260008082526020820152610b2d8383611932565b6000610de8611278565b610df06112d2565b60008311610e2d5760405162461bcd60e51b815260206004820152600a60248201526916995c9bd05b5bdd5b9d60b21b604482015260640161069e565b81831015610e6f5760405162461bcd60e51b815260206004820152600f60248201526e119959515e18d95959105b5bdd5b9d608a1b604482015260640161069e565b6000610e7b8786611932565b80519091506001600160a01b0316610ec85760405162461bcd60e51b815260206004820152601060248201526f2ab739bab83837b93a32b22a37b5b2b760811b604482015260640161069e565b610edd6001600160a01b03861633308761198d565b6000610eee868684602001516119f8565b90506000610f01878685602001516119f8565b9050600660008a815260200190815260200160002060008154809291906001019190505593506040518060a001604052808a8152602001896001600160a01b0316815260200184600001516001600160a01b0316815260200183815260200182815250600760008b815260200190815260200160002060008681526020019081526020016000206000820151816000015560208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506060820151816003015560808201518160040155905050876001600160a01b0316848a7f37347ce0b3ba5929e3851296e482bf7e4a1d9298d09c93d2d0848eac40608d6c86600001518686604051611062939291906001600160a01b039390931683526020830191909152604082015260600190565b60405180910390a450505061107660018055565b95945050505050565b60006001600160e01b03198216637965db0b60e01b14806105fc57506301ffc9a760e01b6001600160e01b03198316146105fc565b6108888133611ab0565b86831480156110cc57508681145b80156110d757508685145b6110f35760405162461bcd60e51b815260040161069e90612c5a565b60005b8781101561122857604051806040016040528086868481811061111b5761111b612c86565b90506020020160208101906111309190612c9c565b6001600160a01b0316815260200184848481811061115057611150612c86565b90506020020160208101906111659190612d8e565b60ff169052600a60008b8b8581811061118057611180612c86565b90506020020160208101906111959190612c9c565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008989858181106111c9576111c9612c86565b602090810292909201358352508181019290925260400160002082518154939092015160ff16600160a01b026001600160a81b03199093166001600160a01b03909216919091179190911790558061122081612ccd565b9150506110f6565b507f31d4b1fa0df2a18e3af7daa11a5bae2a184d37f7b10d162c1fee575c489cc5678888888888888888604051611266989796959493929190612df2565b60405180910390a15050505050505050565b600260015414156112cb5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161069e565b6002600155565b60025460ff16156113185760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161069e565b565b600b546001600160a01b031663facd743b336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611370573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113949190612ea1565b6113185760405162461bcd60e51b815260206004820152600c60248201526b2737ba2b30b634b230ba37b960a11b604482015260640161069e565b60408051602081018890529081018690526bffffffffffffffffffffffff19606086811b82168184015285901b1660748201526088810183905260009060a8016040516020818303038152906040528051906020012090508082146114695760405162461bcd60e51b815260206004820152601060248201526f496e76616c696448617368436865636b60801b604482015260640161069e565b600061147788888433611b09565b9050600181600281111561148d5761148d612bce565b14156115c05761149e868686611d38565b6040518060800160405280898152602001876001600160a01b03168152602001866001600160a01b0316815260200185815250600560008a815260200190815260200160002060008981526020019081526020016000206000820151816000015560208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160030155905050856001600160a01b031687897f9d14005dbcc66b2c540389545fdfdf05ac52df61de115ebf7216aa3ebf5816b988886040516115b79291906001600160a01b03929092168252602082015260400190565b60405180910390a45b604080516001600160a01b03888116825287166020820152908101859052339088908a907ffd4c94d13bd227d9b35353e8df2621c1182abab14d3cac53d3c7596b9aaabf639060600160405180910390a45050505050505050565b6116258282611e3a565b60008281526004602052604090206107bb9082611ec0565b6116478282611ed5565b60008281526004602052604090206107bb9082611f3c565b600084815260086020908152604080832086845282528083203384529091528120805461168b90612cfe565b80601f01602080910402602001604051908101604052809291908181526020018280546116b790612cfe565b80156117045780601f106116d957610100808354040283529160200191611704565b820191906000526020600020905b8154815290600101906020018083116116e757829003601f168201915b5050505050905080516000141561174c57600085815260096020908152604080832087845282528220805460018101825590835291200180546001600160a01b031916331790555b60008581526008602090815260408083208784528252808320338452909152902061177890848461248c565b50336001600160a01b031684867ff8937107156d7b7d7b390c1fa7ef6deb7efe4984e92b58cab8b82b16e727e8aa86866040516117b6929190612ec3565b60405180910390a45050505050565b60025460ff166113185760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161069e565b6118166117c5565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60008281526009602090815260408083208484528252918290208054835181840281018401909452808452606093928301828280156118c857602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116118aa575b5050505050905092915050565b6118dd6112d2565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586118433390565b6000610b2d8383611f51565b61083a828261161b565b60006105fc825490565b6040805180820190915260008082526020820152506001600160a01b039081166000908152600a60209081526040808320948352938152908390208351808501909452549182168352600160a01b90910460ff169082015290565b6040516001600160a01b038085166024830152831660448201526064810182905261085a9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611f7b565b600080846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a5d9190612ef2565b90508060ff168360ff161015611a9157611a778382612f0f565b611a8290600a61300e565b611a8c908561301d565b611076565b611a9b8184612f0f565b611aa690600a61300e565b611076908561303f565b611aba8282610b34565b61083a57611ac78161204d565b611ad283602061205f565b604051602001611ae392919061305e565b60408051601f198184030181529082905262461bcd60e51b825261069e916004016130d3565b6000848152600c6020908152604080832086845282528083206001600160a01b038516845290915281205415611b775760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e5058dadb9bdddb195919d959606a1b604482015260640161069e565b6000858152600c6020908152604080832087845282528083206001600160a01b038087168552908352818420879055888452600e83528184208885528352818420878552835281842054898552600d84528285208986528452828520888652909352922054600b5460ff9092169290911663dafae408611bf88360016130e6565b6040518263ffffffff1660e01b8152600401611c1691815260200190565b602060405180830381865afa158015611c33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c579190612ea1565b15611cd4576000826002811115611c7057611c70612bce565b1415611ca7576000878152600e6020908152604080832089845282528083208884529091529020805460ff19166001179055611cd4565b6000878152600e6020908152604080832089845282528083208884529091529020805460ff191660021790555b6000878152600d6020908152604080832089845282528083208884529091528120805491611d0183612ccd565b9091555050506000868152600e60209081526040808320888452825280832087845290915290205460ff169150505b949350505050565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015611d7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611da391906130fe565b905081811015611e26576001600160a01b0383166340c10f1930611dc78486613117565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015611e0d57600080fd5b505af1158015611e21573d6000803e3d6000fd5b505050505b61085a6001600160a01b03841685846121fa565b611e448282610b34565b61083a5760008281526003602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611e7c3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610b2d836001600160a01b03841661222a565b611edf8282610b34565b1561083a5760008281526003602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610b2d836001600160a01b038416612279565b6000826000018281548110611f6857611f68612c86565b9060005260206000200154905092915050565b6000611fd0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661236c9092919063ffffffff16565b8051909150156107bb5780806020019051810190611fee9190612ea1565b6107bb5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161069e565b60606105fc6001600160a01b03831660145b6060600061206e83600261303f565b6120799060026130e6565b6001600160401b0381111561209057612090612ce8565b6040519080825280601f01601f1916602001820160405280156120ba576020820181803683370190505b509050600360fc1b816000815181106120d5576120d5612c86565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061210457612104612c86565b60200101906001600160f81b031916908160001a905350600061212884600261303f565b6121339060016130e6565b90505b60018111156121ab576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061216757612167612c86565b1a60f81b82828151811061217d5761217d612c86565b60200101906001600160f81b031916908160001a90535060049490941c936121a48161312e565b9050612136565b508315610b2d5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161069e565b6040516001600160a01b0383166024820152604481018290526107bb90849063a9059cbb60e01b906064016119c1565b6000818152600183016020526040812054612271575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556105fc565b5060006105fc565b6000818152600183016020526040812054801561236257600061229d600183613117565b85549091506000906122b190600190613117565b90508181146123165760008660000182815481106122d1576122d1612c86565b90600052602060002001549050808760000184815481106122f4576122f4612c86565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061232757612327613145565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506105fc565b60009150506105fc565b6060611d30848460008585600080866001600160a01b03168587604051612393919061315b565b60006040518083038185875af1925050503d80600081146123d0576040519150601f19603f3d011682016040523d82523d6000602084013e6123d5565b606091505b50915091506123e6878383876123f1565b979650505050505050565b6060831561245d578251612456576001600160a01b0385163b6124565760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161069e565b5081611d30565b611d3083838151156124725781518083602001fd5b8060405162461bcd60e51b815260040161069e91906130d3565b82805461249890612cfe565b90600052602060002090601f0160209004810192826124ba5760008555612500565b82601f106124d35782800160ff19823516178555612500565b82800160010185558215612500579182015b828111156125005782358255916020019190600101906124e5565b5061250c929150612510565b5090565b5b8082111561250c5760008155600101612511565b60006020828403121561253757600080fd5b81356001600160e01b031981168114610b2d57600080fd5b60008083601f84011261256157600080fd5b5081356001600160401b0381111561257857600080fd5b6020830191508360208260051b850101111561259357600080fd5b9250929050565b6000806000806000806000806080898b0312156125b657600080fd5b88356001600160401b03808211156125cd57600080fd5b6125d98c838d0161254f565b909a50985060208b01359150808211156125f257600080fd5b6125fe8c838d0161254f565b909850965060408b013591508082111561261757600080fd5b6126238c838d0161254f565b909650945060608b013591508082111561263c57600080fd5b506126498b828c0161254f565b999c989b5096995094979396929594505050565b60008060008060008060008060008060008060c08d8f03121561267f57600080fd5b6001600160401b038d35111561269457600080fd5b6126a18e8e358f0161254f565b909c509a506001600160401b0360208e013511156126be57600080fd5b6126ce8e60208f01358f0161254f565b909a5098506001600160401b0360408e013511156126eb57600080fd5b6126fb8e60408f01358f0161254f565b90985096506001600160401b0360608e0135111561271857600080fd5b6127288e60608f01358f0161254f565b90965094506001600160401b0360808e0135111561274557600080fd5b6127558e60808f01358f0161254f565b90945092506001600160401b0360a08e0135111561277257600080fd5b6127828e60a08f01358f0161254f565b81935080925050509295989b509295989b509295989b565b6000602082840312156127ac57600080fd5b5035919050565b80356001600160a01b03811681146127ca57600080fd5b919050565b600080604083850312156127e257600080fd5b823591506127f2602084016127b3565b90509250929050565b6000806040838503121561280e57600080fd5b50508035926020909101359150565b6000806000806060858703121561283357600080fd5b843593506020850135925060408501356001600160401b038082111561285857600080fd5b818701915087601f83011261286c57600080fd5b81358181111561287b57600080fd5b88602082850101111561288d57600080fd5b95989497505060200194505050565b60005b838110156128b757818101518382015260200161289f565b8381111561085a5750506000910152565b600081518084526128e081602086016020860161289c565b601f01601f19169290920160200192915050565b604080825283519082018190526000906020906060840190828701845b828110156129365781516001600160a01b031684529284019290840190600101612911565b50505083810382850152845180825282820190600581901b8301840187850160005b8381101561298657601f198684030185526129748383516128c8565b94870194925090860190600101612958565b50909998505050505050505050565b60008060008060008060c087890312156129ae57600080fd5b86359550602087013594506129c5604088016127b3565b93506129d3606088016127b3565b92506080870135915060a087013590509295509295509295565b600080600060608486031215612a0257600080fd5b505081359360208301359350604090920135919050565b60008060008060008060008060008060c08b8d031215612a3857600080fd5b612a418b6127b3565b9950612a4f60208c016127b3565b985060408b01356001600160401b0380821115612a6b57600080fd5b612a778e838f0161254f565b909a50985060608d0135915080821115612a9057600080fd5b612a9c8e838f0161254f565b909850965060808d0135915080821115612ab557600080fd5b612ac18e838f0161254f565b909650945060a08d0135915080821115612ada57600080fd5b50612ae78d828e0161254f565b915080935050809150509295989b9194979a5092959850565b600080600060608486031215612b1557600080fd5b8335925060208401359150612b2c604085016127b3565b90509250925092565b60008060008060008060608789031215612b4e57600080fd5b86356001600160401b0380821115612b6557600080fd5b612b718a838b0161254f565b90985096506020890135915080821115612b8a57600080fd5b612b968a838b0161254f565b90965094506040890135915080821115612baf57600080fd5b50612bbc89828a0161254f565b979a9699509497509295939492505050565b634e487b7160e01b600052602160045260246000fd5b6020810160038310612c0657634e487b7160e01b600052602160045260246000fd5b91905290565b600080600080600060a08688031215612c2457600080fd5b85359450612c34602087016127b3565b9350612c42604087016127b3565b94979396509394606081013594506080013592915050565b602080825260129082015271092dcecc2d8d2c882e4e4c2f298cadccee8d60731b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b600060208284031215612cae57600080fd5b610b2d826127b3565b634e487b7160e01b600052601160045260246000fd5b6000600019821415612ce157612ce1612cb7565b5060010190565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680612d1257607f821691505b60208210811415612d3357634e487b7160e01b600052602260045260246000fd5b50919050565b6000808335601e19843603018112612d5057600080fd5b8301803591506001600160401b03821115612d6a57600080fd5b60200191503681900382131561259357600080fd5b60ff8116811461088857600080fd5b600060208284031215612da057600080fd5b8135610b2d81612d7f565b8183526000602080850194508260005b85811015612de7576001600160a01b03612dd4836127b3565b1687529582019590820190600101612dbb565b509495945050505050565b608081526000612e06608083018a8c612dab565b8281036020848101919091528882526001600160fb1b03891115612e2957600080fd5b8860051b808b83850137600092018181019283528481038201604086015291612e5381898b612dab565b85810360608701528681528793508201905060005b86811015612e90578335612e7b81612d7f565b60ff1682529282019290820190600101612e68565b509c9b505050505050505050505050565b600060208284031215612eb357600080fd5b81518015158114610b2d57600080fd5b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b600060208284031215612f0457600080fd5b8151610b2d81612d7f565b600060ff821660ff841680821015612f2957612f29612cb7565b90039392505050565b600181815b80851115610a06578160001904821115612f5357612f53612cb7565b80851615612f6057918102915b93841c9390800290612f37565b600082612f7c575060016105fc565b81612f89575060006105fc565b8160018114612f9f5760028114612fa957612fc5565b60019150506105fc565b60ff841115612fba57612fba612cb7565b50506001821b6105fc565b5060208310610133831016604e8410600b8410161715612fe8575081810a6105fc565b612ff28383612f32565b806000190482111561300657613006612cb7565b029392505050565b6000610b2d60ff841683612f6d565b60008261303a57634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561305957613059612cb7565b500290565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161309681601785016020880161289c565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516130c781602884016020880161289c565b01602801949350505050565b602081526000610b2d60208301846128c8565b600082198211156130f9576130f9612cb7565b500190565b60006020828403121561311057600080fd5b5051919050565b60008282101561312957613129612cb7565b500390565b60008161313d5761313d612cb7565b506000190190565b634e487b7160e01b600052603160045260246000fd5b6000825161316d81846020870161289c565b919091019291505056fea49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a2646970667358221220b83fd18e8bdc8cf7284f61cce2f43720b1d3c7f41de1704257d97153af10b7ba64736f6c634300080a0033",
}

// CrossbellGatewayABI is the input ABI used to generate the binding from.
// Deprecated: Use CrossbellGatewayMetaData.ABI instead.
var CrossbellGatewayABI = CrossbellGatewayMetaData.ABI

// CrossbellGatewayBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use CrossbellGatewayMetaData.Bin instead.
var CrossbellGatewayBin = CrossbellGatewayMetaData.Bin

// DeployCrossbellGateway deploys a new Ethereum contract, binding an instance of CrossbellGateway to it.
func DeployCrossbellGateway(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *CrossbellGateway, error) {
	parsed, err := CrossbellGatewayMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CrossbellGatewayBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CrossbellGateway{CrossbellGatewayCaller: CrossbellGatewayCaller{contract: contract}, CrossbellGatewayTransactor: CrossbellGatewayTransactor{contract: contract}, CrossbellGatewayFilterer: CrossbellGatewayFilterer{contract: contract}}, nil
}

// CrossbellGateway is an auto generated Go binding around an Ethereum contract.
type CrossbellGateway struct {
	CrossbellGatewayCaller     // Read-only binding to the contract
	CrossbellGatewayTransactor // Write-only binding to the contract
	CrossbellGatewayFilterer   // Log filterer for contract events
}

// CrossbellGatewayCaller is an auto generated read-only Go binding around an Ethereum contract.
type CrossbellGatewayCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CrossbellGatewayTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CrossbellGatewayTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CrossbellGatewayFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CrossbellGatewayFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CrossbellGatewaySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CrossbellGatewaySession struct {
	Contract     *CrossbellGateway // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CrossbellGatewayCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CrossbellGatewayCallerSession struct {
	Contract *CrossbellGatewayCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// CrossbellGatewayTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CrossbellGatewayTransactorSession struct {
	Contract     *CrossbellGatewayTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// CrossbellGatewayRaw is an auto generated low-level Go binding around an Ethereum contract.
type CrossbellGatewayRaw struct {
	Contract *CrossbellGateway // Generic contract binding to access the raw methods on
}

// CrossbellGatewayCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CrossbellGatewayCallerRaw struct {
	Contract *CrossbellGatewayCaller // Generic read-only contract binding to access the raw methods on
}

// CrossbellGatewayTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CrossbellGatewayTransactorRaw struct {
	Contract *CrossbellGatewayTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCrossbellGateway creates a new instance of CrossbellGateway, bound to a specific deployed contract.
func NewCrossbellGateway(address common.Address, backend bind.ContractBackend) (*CrossbellGateway, error) {
	contract, err := bindCrossbellGateway(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CrossbellGateway{CrossbellGatewayCaller: CrossbellGatewayCaller{contract: contract}, CrossbellGatewayTransactor: CrossbellGatewayTransactor{contract: contract}, CrossbellGatewayFilterer: CrossbellGatewayFilterer{contract: contract}}, nil
}

// NewCrossbellGatewayCaller creates a new read-only instance of CrossbellGateway, bound to a specific deployed contract.
func NewCrossbellGatewayCaller(address common.Address, caller bind.ContractCaller) (*CrossbellGatewayCaller, error) {
	contract, err := bindCrossbellGateway(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CrossbellGatewayCaller{contract: contract}, nil
}

// NewCrossbellGatewayTransactor creates a new write-only instance of CrossbellGateway, bound to a specific deployed contract.
func NewCrossbellGatewayTransactor(address common.Address, transactor bind.ContractTransactor) (*CrossbellGatewayTransactor, error) {
	contract, err := bindCrossbellGateway(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CrossbellGatewayTransactor{contract: contract}, nil
}

// NewCrossbellGatewayFilterer creates a new log filterer instance of CrossbellGateway, bound to a specific deployed contract.
func NewCrossbellGatewayFilterer(address common.Address, filterer bind.ContractFilterer) (*CrossbellGatewayFilterer, error) {
	contract, err := bindCrossbellGateway(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CrossbellGatewayFilterer{contract: contract}, nil
}

// bindCrossbellGateway binds a generic wrapper to an already deployed contract.
func bindCrossbellGateway(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(CrossbellGatewayABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CrossbellGateway *CrossbellGatewayRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CrossbellGateway.Contract.CrossbellGatewayCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CrossbellGateway *CrossbellGatewayRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CrossbellGateway.Contract.CrossbellGatewayTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CrossbellGateway *CrossbellGatewayRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CrossbellGateway.Contract.CrossbellGatewayTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CrossbellGateway *CrossbellGatewayCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CrossbellGateway.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CrossbellGateway *CrossbellGatewayTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CrossbellGateway.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CrossbellGateway *CrossbellGatewayTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CrossbellGateway.Contract.contract.Transact(opts, method, params...)
}

// ADMINROLE is a free data retrieval call binding the contract method 0x75b238fc.
//
// Solidity: function ADMIN_ROLE() view returns(bytes32)
func (_CrossbellGateway *CrossbellGatewayCaller) ADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _CrossbellGateway.contract.Call(opts, &out, "ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ADMINROLE is a free data retrieval call binding the contract method 0x75b238fc.
//
// Solidity: function ADMIN_ROLE() view returns(bytes32)
func (_CrossbellGateway *CrossbellGatewaySession) ADMINROLE() ([32]byte, error) {
	return _CrossbellGateway.Contract.ADMINROLE(&_CrossbellGateway.CallOpts)
}

// ADMINROLE is a free data retrieval call binding the contract method 0x75b238fc.
//
// Solidity: function ADMIN_ROLE() view returns(bytes32)
func (_CrossbellGateway *CrossbellGatewayCallerSession) ADMINROLE() ([32]byte, error) {
	return _CrossbellGateway.Contract.ADMINROLE(&_CrossbellGateway.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_CrossbellGateway *CrossbellGatewayCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _CrossbellGateway.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_CrossbellGateway *CrossbellGatewaySession) DEFAULTADMINROLE() ([32]byte, error) {
	return _CrossbellGateway.Contract.DEFAULTADMINROLE(&_CrossbellGateway.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_CrossbellGateway *CrossbellGatewayCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _CrossbellGateway.Contract.DEFAULTADMINROLE(&_CrossbellGateway.CallOpts)
}

// GetAcknowledgementCount is a free data retrieval call binding the contract method 0x7a597ecc.
//
// Solidity: function getAcknowledgementCount(uint256 chainId, uint256 id, bytes32 hash) view returns(uint256)
func (_CrossbellGateway *CrossbellGatewayCaller) GetAcknowledgementCount(opts *bind.CallOpts, chainId *big.Int, id *big.Int, hash [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _CrossbellGateway.contract.Call(opts, &out, "getAcknowledgementCount", chainId, id, hash)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAcknowledgementCount is a free data retrieval call binding the contract method 0x7a597ecc.
//
// Solidity: function getAcknowledgementCount(uint256 chainId, uint256 id, bytes32 hash) view returns(uint256)
func (_CrossbellGateway *CrossbellGatewaySession) GetAcknowledgementCount(chainId *big.Int, id *big.Int, hash [32]byte) (*big.Int, error) {
	return _CrossbellGateway.Contract.GetAcknowledgementCount(&_CrossbellGateway.CallOpts, chainId, id, hash)
}

// GetAcknowledgementCount is a free data retrieval call binding the contract method 0x7a597ecc.
//
// Solidity: function getAcknowledgementCount(uint256 chainId, uint256 id, bytes32 hash) view returns(uint256)
func (_CrossbellGateway *CrossbellGatewayCallerSession) GetAcknowledgementCount(chainId *big.Int, id *big.Int, hash [32]byte) (*big.Int, error) {
	return _CrossbellGateway.Contract.GetAcknowledgementCount(&_CrossbellGateway.CallOpts, chainId, id, hash)
}

// GetAcknowledgementStatus is a free data retrieval call binding the contract method 0xdaaf394a.
//
// Solidity: function getAcknowledgementStatus(uint256 chainId, uint256 id, bytes32 hash) view returns(uint8)
func (_CrossbellGateway *CrossbellGatewayCaller) GetAcknowledgementStatus(opts *bind.CallOpts, chainId *big.Int, id *big.Int, hash [32]byte) (uint8, error) {
	var out []interface{}
	err := _CrossbellGateway.contract.Call(opts, &out, "getAcknowledgementStatus", chainId, id, hash)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetAcknowledgementStatus is a free data retrieval call binding the contract method 0xdaaf394a.
//
// Solidity: function getAcknowledgementStatus(uint256 chainId, uint256 id, bytes32 hash) view returns(uint8)
func (_CrossbellGateway *CrossbellGatewaySession) GetAcknowledgementStatus(chainId *big.Int, id *big.Int, hash [32]byte) (uint8, error) {
	return _CrossbellGateway.Contract.GetAcknowledgementStatus(&_CrossbellGateway.CallOpts, chainId, id, hash)
}

// GetAcknowledgementStatus is a free data retrieval call binding the contract method 0xdaaf394a.
//
// Solidity: function getAcknowledgementStatus(uint256 chainId, uint256 id, bytes32 hash) view returns(uint8)
func (_CrossbellGateway *CrossbellGatewayCallerSession) GetAcknowledgementStatus(chainId *big.Int, id *big.Int, hash [32]byte) (uint8, error) {
	return _CrossbellGateway.Contract.GetAcknowledgementStatus(&_CrossbellGateway.CallOpts, chainId, id, hash)
}

// GetDepositEntry is a free data retrieval call binding the contract method 0x3a9e6613.
//
// Solidity: function getDepositEntry(uint256 chainId, uint256 depositId) view returns((uint256,address,address,uint256))
func (_CrossbellGateway *CrossbellGatewayCaller) GetDepositEntry(opts *bind.CallOpts, chainId *big.Int, depositId *big.Int) (DataTypesDepositEntry, error) {
	var out []interface{}
	err := _CrossbellGateway.contract.Call(opts, &out, "getDepositEntry", chainId, depositId)

	if err != nil {
		return *new(DataTypesDepositEntry), err
	}

	out0 := *abi.ConvertType(out[0], new(DataTypesDepositEntry)).(*DataTypesDepositEntry)

	return out0, err

}

// GetDepositEntry is a free data retrieval call binding the contract method 0x3a9e6613.
//
// Solidity: function getDepositEntry(uint256 chainId, uint256 depositId) view returns((uint256,address,address,uint256))
func (_CrossbellGateway *CrossbellGatewaySession) GetDepositEntry(chainId *big.Int, depositId *big.Int) (DataTypesDepositEntry, error) {
	return _CrossbellGateway.Contract.GetDepositEntry(&_CrossbellGateway.CallOpts, chainId, depositId)
}

// GetDepositEntry is a free data retrieval call binding the contract method 0x3a9e6613.
//
// Solidity: function getDepositEntry(uint256 chainId, uint256 depositId) view returns((uint256,address,address,uint256))
func (_CrossbellGateway *CrossbellGatewayCallerSession) GetDepositEntry(chainId *big.Int, depositId *big.Int) (DataTypesDepositEntry, error) {
	return _CrossbellGateway.Contract.GetDepositEntry(&_CrossbellGateway.CallOpts, chainId, depositId)
}

// GetMainchainToken is a free data retrieval call binding the contract method 0xd587cc60.
//
// Solidity: function getMainchainToken(uint256 chainId, address crossbellToken) view returns((address,uint8) token)
func (_CrossbellGateway *CrossbellGatewayCaller) GetMainchainToken(opts *bind.CallOpts, chainId *big.Int, crossbellToken common.Address) (DataTypesMappedToken, error) {
	var out []interface{}
	err := _CrossbellGateway.contract.Call(opts, &out, "getMainchainToken", chainId, crossbellToken)

	if err != nil {
		return *new(DataTypesMappedToken), err
	}

	out0 := *abi.ConvertType(out[0], new(DataTypesMappedToken)).(*DataTypesMappedToken)

	return out0, err

}

// GetMainchainToken is a free data retrieval call binding the contract method 0xd587cc60.
//
// Solidity: function getMainchainToken(uint256 chainId, address crossbellToken) view returns((address,uint8) token)
func (_CrossbellGateway *CrossbellGatewaySession) GetMainchainToken(chainId *big.Int, crossbellToken common.Address) (DataTypesMappedToken, error) {
	return _CrossbellGateway.Contract.GetMainchainToken(&_CrossbellGateway.CallOpts, chainId, crossbellToken)
}

// GetMainchainToken is a free data retrieval call binding the contract method 0xd587cc60.
//
// Solidity: function getMainchainToken(uint256 chainId, address crossbellToken) view returns((address,uint8) token)
func (_CrossbellGateway *CrossbellGatewayCallerSession) GetMainchainToken(chainId *big.Int, crossbellToken common.Address) (DataTypesMappedToken, error) {
	return _CrossbellGateway.Contract.GetMainchainToken(&_CrossbellGateway.CallOpts, chainId, crossbellToken)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_CrossbellGateway *CrossbellGatewayCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _CrossbellGateway.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_CrossbellGateway *CrossbellGatewaySession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _CrossbellGateway.Contract.GetRoleAdmin(&_CrossbellGateway.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_CrossbellGateway *CrossbellGatewayCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _CrossbellGateway.Contract.GetRoleAdmin(&_CrossbellGateway.CallOpts, role)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_CrossbellGateway *CrossbellGatewayCaller) GetRoleMember(opts *bind.CallOpts, role [32]byte, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _CrossbellGateway.contract.Call(opts, &out, "getRoleMember", role, index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_CrossbellGateway *CrossbellGatewaySession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _CrossbellGateway.Contract.GetRoleMember(&_CrossbellGateway.CallOpts, role, index)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_CrossbellGateway *CrossbellGatewayCallerSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _CrossbellGateway.Contract.GetRoleMember(&_CrossbellGateway.CallOpts, role, index)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_CrossbellGateway *CrossbellGatewayCaller) GetRoleMemberCount(opts *bind.CallOpts, role [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _CrossbellGateway.contract.Call(opts, &out, "getRoleMemberCount", role)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_CrossbellGateway *CrossbellGatewaySession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _CrossbellGateway.Contract.GetRoleMemberCount(&_CrossbellGateway.CallOpts, role)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_CrossbellGateway *CrossbellGatewayCallerSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _CrossbellGateway.Contract.GetRoleMemberCount(&_CrossbellGateway.CallOpts, role)
}

// GetValidatorAcknowledgementHash is a free data retrieval call binding the contract method 0xb8d5c2e6.
//
// Solidity: function getValidatorAcknowledgementHash(uint256 chainId, uint256 id, address validator) view returns(bytes32)
func (_CrossbellGateway *CrossbellGatewayCaller) GetValidatorAcknowledgementHash(opts *bind.CallOpts, chainId *big.Int, id *big.Int, validator common.Address) ([32]byte, error) {
	var out []interface{}
	err := _CrossbellGateway.contract.Call(opts, &out, "getValidatorAcknowledgementHash", chainId, id, validator)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetValidatorAcknowledgementHash is a free data retrieval call binding the contract method 0xb8d5c2e6.
//
// Solidity: function getValidatorAcknowledgementHash(uint256 chainId, uint256 id, address validator) view returns(bytes32)
func (_CrossbellGateway *CrossbellGatewaySession) GetValidatorAcknowledgementHash(chainId *big.Int, id *big.Int, validator common.Address) ([32]byte, error) {
	return _CrossbellGateway.Contract.GetValidatorAcknowledgementHash(&_CrossbellGateway.CallOpts, chainId, id, validator)
}

// GetValidatorAcknowledgementHash is a free data retrieval call binding the contract method 0xb8d5c2e6.
//
// Solidity: function getValidatorAcknowledgementHash(uint256 chainId, uint256 id, address validator) view returns(bytes32)
func (_CrossbellGateway *CrossbellGatewayCallerSession) GetValidatorAcknowledgementHash(chainId *big.Int, id *big.Int, validator common.Address) ([32]byte, error) {
	return _CrossbellGateway.Contract.GetValidatorAcknowledgementHash(&_CrossbellGateway.CallOpts, chainId, id, validator)
}

// GetValidatorContract is a free data retrieval call binding the contract method 0x6f94c5e9.
//
// Solidity: function getValidatorContract() view returns(address)
func (_CrossbellGateway *CrossbellGatewayCaller) GetValidatorContract(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CrossbellGateway.contract.Call(opts, &out, "getValidatorContract")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetValidatorContract is a free data retrieval call binding the contract method 0x6f94c5e9.
//
// Solidity: function getValidatorContract() view returns(address)
func (_CrossbellGateway *CrossbellGatewaySession) GetValidatorContract() (common.Address, error) {
	return _CrossbellGateway.Contract.GetValidatorContract(&_CrossbellGateway.CallOpts)
}

// GetValidatorContract is a free data retrieval call binding the contract method 0x6f94c5e9.
//
// Solidity: function getValidatorContract() view returns(address)
func (_CrossbellGateway *CrossbellGatewayCallerSession) GetValidatorContract() (common.Address, error) {
	return _CrossbellGateway.Contract.GetValidatorContract(&_CrossbellGateway.CallOpts)
}

// GetWithdrawalCount is a free data retrieval call binding the contract method 0x80f3603a.
//
// Solidity: function getWithdrawalCount(uint256 chainId) view returns(uint256)
func (_CrossbellGateway *CrossbellGatewayCaller) GetWithdrawalCount(opts *bind.CallOpts, chainId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _CrossbellGateway.contract.Call(opts, &out, "getWithdrawalCount", chainId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetWithdrawalCount is a free data retrieval call binding the contract method 0x80f3603a.
//
// Solidity: function getWithdrawalCount(uint256 chainId) view returns(uint256)
func (_CrossbellGateway *CrossbellGatewaySession) GetWithdrawalCount(chainId *big.Int) (*big.Int, error) {
	return _CrossbellGateway.Contract.GetWithdrawalCount(&_CrossbellGateway.CallOpts, chainId)
}

// GetWithdrawalCount is a free data retrieval call binding the contract method 0x80f3603a.
//
// Solidity: function getWithdrawalCount(uint256 chainId) view returns(uint256)
func (_CrossbellGateway *CrossbellGatewayCallerSession) GetWithdrawalCount(chainId *big.Int) (*big.Int, error) {
	return _CrossbellGateway.Contract.GetWithdrawalCount(&_CrossbellGateway.CallOpts, chainId)
}

// GetWithdrawalEntry is a free data retrieval call binding the contract method 0x53f809b1.
//
// Solidity: function getWithdrawalEntry(uint256 chainId, uint256 withdrawalId) view returns((uint256,address,address,uint256,uint256))
func (_CrossbellGateway *CrossbellGatewayCaller) GetWithdrawalEntry(opts *bind.CallOpts, chainId *big.Int, withdrawalId *big.Int) (DataTypesWithdrawalEntry, error) {
	var out []interface{}
	err := _CrossbellGateway.contract.Call(opts, &out, "getWithdrawalEntry", chainId, withdrawalId)

	if err != nil {
		return *new(DataTypesWithdrawalEntry), err
	}

	out0 := *abi.ConvertType(out[0], new(DataTypesWithdrawalEntry)).(*DataTypesWithdrawalEntry)

	return out0, err

}

// GetWithdrawalEntry is a free data retrieval call binding the contract method 0x53f809b1.
//
// Solidity: function getWithdrawalEntry(uint256 chainId, uint256 withdrawalId) view returns((uint256,address,address,uint256,uint256))
func (_CrossbellGateway *CrossbellGatewaySession) GetWithdrawalEntry(chainId *big.Int, withdrawalId *big.Int) (DataTypesWithdrawalEntry, error) {
	return _CrossbellGateway.Contract.GetWithdrawalEntry(&_CrossbellGateway.CallOpts, chainId, withdrawalId)
}

// GetWithdrawalEntry is a free data retrieval call binding the contract method 0x53f809b1.
//
// Solidity: function getWithdrawalEntry(uint256 chainId, uint256 withdrawalId) view returns((uint256,address,address,uint256,uint256))
func (_CrossbellGateway *CrossbellGatewayCallerSession) GetWithdrawalEntry(chainId *big.Int, withdrawalId *big.Int) (DataTypesWithdrawalEntry, error) {
	return _CrossbellGateway.Contract.GetWithdrawalEntry(&_CrossbellGateway.CallOpts, chainId, withdrawalId)
}

// GetWithdrawalSignatures is a free data retrieval call binding the contract method 0x43fb02c7.
//
// Solidity: function getWithdrawalSignatures(uint256 chainId, uint256 withdrawalId) view returns(address[] signers, bytes[] sigs)
func (_CrossbellGateway *CrossbellGatewayCaller) GetWithdrawalSignatures(opts *bind.CallOpts, chainId *big.Int, withdrawalId *big.Int) (struct {
	Signers []common.Address
	Sigs    [][]byte
}, error) {
	var out []interface{}
	err := _CrossbellGateway.contract.Call(opts, &out, "getWithdrawalSignatures", chainId, withdrawalId)

	outstruct := new(struct {
		Signers []common.Address
		Sigs    [][]byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Signers = *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	outstruct.Sigs = *abi.ConvertType(out[1], new([][]byte)).(*[][]byte)

	return *outstruct, err

}

// GetWithdrawalSignatures is a free data retrieval call binding the contract method 0x43fb02c7.
//
// Solidity: function getWithdrawalSignatures(uint256 chainId, uint256 withdrawalId) view returns(address[] signers, bytes[] sigs)
func (_CrossbellGateway *CrossbellGatewaySession) GetWithdrawalSignatures(chainId *big.Int, withdrawalId *big.Int) (struct {
	Signers []common.Address
	Sigs    [][]byte
}, error) {
	return _CrossbellGateway.Contract.GetWithdrawalSignatures(&_CrossbellGateway.CallOpts, chainId, withdrawalId)
}

// GetWithdrawalSignatures is a free data retrieval call binding the contract method 0x43fb02c7.
//
// Solidity: function getWithdrawalSignatures(uint256 chainId, uint256 withdrawalId) view returns(address[] signers, bytes[] sigs)
func (_CrossbellGateway *CrossbellGatewayCallerSession) GetWithdrawalSignatures(chainId *big.Int, withdrawalId *big.Int) (struct {
	Signers []common.Address
	Sigs    [][]byte
}, error) {
	return _CrossbellGateway.Contract.GetWithdrawalSignatures(&_CrossbellGateway.CallOpts, chainId, withdrawalId)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_CrossbellGateway *CrossbellGatewayCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _CrossbellGateway.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_CrossbellGateway *CrossbellGatewaySession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _CrossbellGateway.Contract.HasRole(&_CrossbellGateway.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_CrossbellGateway *CrossbellGatewayCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _CrossbellGateway.Contract.HasRole(&_CrossbellGateway.CallOpts, role, account)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_CrossbellGateway *CrossbellGatewayCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _CrossbellGateway.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_CrossbellGateway *CrossbellGatewaySession) Paused() (bool, error) {
	return _CrossbellGateway.Contract.Paused(&_CrossbellGateway.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_CrossbellGateway *CrossbellGatewayCallerSession) Paused() (bool, error) {
	return _CrossbellGateway.Contract.Paused(&_CrossbellGateway.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_CrossbellGateway *CrossbellGatewayCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _CrossbellGateway.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_CrossbellGateway *CrossbellGatewaySession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _CrossbellGateway.Contract.SupportsInterface(&_CrossbellGateway.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_CrossbellGateway *CrossbellGatewayCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _CrossbellGateway.Contract.SupportsInterface(&_CrossbellGateway.CallOpts, interfaceId)
}

// AckDeposit is a paid mutator transaction binding the contract method 0x477a4ad4.
//
// Solidity: function ackDeposit(uint256 chainId, uint256 depositId, address recipient, address token, uint256 amount, bytes32 depositHash) returns()
func (_CrossbellGateway *CrossbellGatewayTransactor) AckDeposit(opts *bind.TransactOpts, chainId *big.Int, depositId *big.Int, recipient common.Address, token common.Address, amount *big.Int, depositHash [32]byte) (*types.Transaction, error) {
	return _CrossbellGateway.contract.Transact(opts, "ackDeposit", chainId, depositId, recipient, token, amount, depositHash)
}

// AckDeposit is a paid mutator transaction binding the contract method 0x477a4ad4.
//
// Solidity: function ackDeposit(uint256 chainId, uint256 depositId, address recipient, address token, uint256 amount, bytes32 depositHash) returns()
func (_CrossbellGateway *CrossbellGatewaySession) AckDeposit(chainId *big.Int, depositId *big.Int, recipient common.Address, token common.Address, amount *big.Int, depositHash [32]byte) (*types.Transaction, error) {
	return _CrossbellGateway.Contract.AckDeposit(&_CrossbellGateway.TransactOpts, chainId, depositId, recipient, token, amount, depositHash)
}

// AckDeposit is a paid mutator transaction binding the contract method 0x477a4ad4.
//
// Solidity: function ackDeposit(uint256 chainId, uint256 depositId, address recipient, address token, uint256 amount, bytes32 depositHash) returns()
func (_CrossbellGateway *CrossbellGatewayTransactorSession) AckDeposit(chainId *big.Int, depositId *big.Int, recipient common.Address, token common.Address, amount *big.Int, depositHash [32]byte) (*types.Transaction, error) {
	return _CrossbellGateway.Contract.AckDeposit(&_CrossbellGateway.TransactOpts, chainId, depositId, recipient, token, amount, depositHash)
}

// BatchAckDeposit is a paid mutator transaction binding the contract method 0x210a6477.
//
// Solidity: function batchAckDeposit(uint256[] chainIds, uint256[] depositIds, address[] recipients, address[] tokens, uint256[] amounts, bytes32[] depositHashes) returns()
func (_CrossbellGateway *CrossbellGatewayTransactor) BatchAckDeposit(opts *bind.TransactOpts, chainIds []*big.Int, depositIds []*big.Int, recipients []common.Address, tokens []common.Address, amounts []*big.Int, depositHashes [][32]byte) (*types.Transaction, error) {
	return _CrossbellGateway.contract.Transact(opts, "batchAckDeposit", chainIds, depositIds, recipients, tokens, amounts, depositHashes)
}

// BatchAckDeposit is a paid mutator transaction binding the contract method 0x210a6477.
//
// Solidity: function batchAckDeposit(uint256[] chainIds, uint256[] depositIds, address[] recipients, address[] tokens, uint256[] amounts, bytes32[] depositHashes) returns()
func (_CrossbellGateway *CrossbellGatewaySession) BatchAckDeposit(chainIds []*big.Int, depositIds []*big.Int, recipients []common.Address, tokens []common.Address, amounts []*big.Int, depositHashes [][32]byte) (*types.Transaction, error) {
	return _CrossbellGateway.Contract.BatchAckDeposit(&_CrossbellGateway.TransactOpts, chainIds, depositIds, recipients, tokens, amounts, depositHashes)
}

// BatchAckDeposit is a paid mutator transaction binding the contract method 0x210a6477.
//
// Solidity: function batchAckDeposit(uint256[] chainIds, uint256[] depositIds, address[] recipients, address[] tokens, uint256[] amounts, bytes32[] depositHashes) returns()
func (_CrossbellGateway *CrossbellGatewayTransactorSession) BatchAckDeposit(chainIds []*big.Int, depositIds []*big.Int, recipients []common.Address, tokens []common.Address, amounts []*big.Int, depositHashes [][32]byte) (*types.Transaction, error) {
	return _CrossbellGateway.Contract.BatchAckDeposit(&_CrossbellGateway.TransactOpts, chainIds, depositIds, recipients, tokens, amounts, depositHashes)
}

// BatchSubmitWithdrawalSignatures is a paid mutator transaction binding the contract method 0xbde268a1.
//
// Solidity: function batchSubmitWithdrawalSignatures(uint256[] chainIds, uint256[] withdrawalIds, bytes[] sigs) returns()
func (_CrossbellGateway *CrossbellGatewayTransactor) BatchSubmitWithdrawalSignatures(opts *bind.TransactOpts, chainIds []*big.Int, withdrawalIds []*big.Int, sigs [][]byte) (*types.Transaction, error) {
	return _CrossbellGateway.contract.Transact(opts, "batchSubmitWithdrawalSignatures", chainIds, withdrawalIds, sigs)
}

// BatchSubmitWithdrawalSignatures is a paid mutator transaction binding the contract method 0xbde268a1.
//
// Solidity: function batchSubmitWithdrawalSignatures(uint256[] chainIds, uint256[] withdrawalIds, bytes[] sigs) returns()
func (_CrossbellGateway *CrossbellGatewaySession) BatchSubmitWithdrawalSignatures(chainIds []*big.Int, withdrawalIds []*big.Int, sigs [][]byte) (*types.Transaction, error) {
	return _CrossbellGateway.Contract.BatchSubmitWithdrawalSignatures(&_CrossbellGateway.TransactOpts, chainIds, withdrawalIds, sigs)
}

// BatchSubmitWithdrawalSignatures is a paid mutator transaction binding the contract method 0xbde268a1.
//
// Solidity: function batchSubmitWithdrawalSignatures(uint256[] chainIds, uint256[] withdrawalIds, bytes[] sigs) returns()
func (_CrossbellGateway *CrossbellGatewayTransactorSession) BatchSubmitWithdrawalSignatures(chainIds []*big.Int, withdrawalIds []*big.Int, sigs [][]byte) (*types.Transaction, error) {
	return _CrossbellGateway.Contract.BatchSubmitWithdrawalSignatures(&_CrossbellGateway.TransactOpts, chainIds, withdrawalIds, sigs)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_CrossbellGateway *CrossbellGatewayTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CrossbellGateway.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_CrossbellGateway *CrossbellGatewaySession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CrossbellGateway.Contract.GrantRole(&_CrossbellGateway.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_CrossbellGateway *CrossbellGatewayTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CrossbellGateway.Contract.GrantRole(&_CrossbellGateway.TransactOpts, role, account)
}

// Initialize is a paid mutator transaction binding the contract method 0xa26b2906.
//
// Solidity: function initialize(address validator, address admin, address[] crossbellTokens, uint256[] chainIds, address[] mainchainTokens, uint8[] mainchainTokenDecimals) returns()
func (_CrossbellGateway *CrossbellGatewayTransactor) Initialize(opts *bind.TransactOpts, validator common.Address, admin common.Address, crossbellTokens []common.Address, chainIds []*big.Int, mainchainTokens []common.Address, mainchainTokenDecimals []uint8) (*types.Transaction, error) {
	return _CrossbellGateway.contract.Transact(opts, "initialize", validator, admin, crossbellTokens, chainIds, mainchainTokens, mainchainTokenDecimals)
}

// Initialize is a paid mutator transaction binding the contract method 0xa26b2906.
//
// Solidity: function initialize(address validator, address admin, address[] crossbellTokens, uint256[] chainIds, address[] mainchainTokens, uint8[] mainchainTokenDecimals) returns()
func (_CrossbellGateway *CrossbellGatewaySession) Initialize(validator common.Address, admin common.Address, crossbellTokens []common.Address, chainIds []*big.Int, mainchainTokens []common.Address, mainchainTokenDecimals []uint8) (*types.Transaction, error) {
	return _CrossbellGateway.Contract.Initialize(&_CrossbellGateway.TransactOpts, validator, admin, crossbellTokens, chainIds, mainchainTokens, mainchainTokenDecimals)
}

// Initialize is a paid mutator transaction binding the contract method 0xa26b2906.
//
// Solidity: function initialize(address validator, address admin, address[] crossbellTokens, uint256[] chainIds, address[] mainchainTokens, uint8[] mainchainTokenDecimals) returns()
func (_CrossbellGateway *CrossbellGatewayTransactorSession) Initialize(validator common.Address, admin common.Address, crossbellTokens []common.Address, chainIds []*big.Int, mainchainTokens []common.Address, mainchainTokenDecimals []uint8) (*types.Transaction, error) {
	return _CrossbellGateway.Contract.Initialize(&_CrossbellGateway.TransactOpts, validator, admin, crossbellTokens, chainIds, mainchainTokens, mainchainTokenDecimals)
}

// MapTokens is a paid mutator transaction binding the contract method 0x0dfd6d30.
//
// Solidity: function mapTokens(address[] crossbellTokens, uint256[] chainIds, address[] mainchainTokens, uint8[] mainchainTokenDecimals) returns()
func (_CrossbellGateway *CrossbellGatewayTransactor) MapTokens(opts *bind.TransactOpts, crossbellTokens []common.Address, chainIds []*big.Int, mainchainTokens []common.Address, mainchainTokenDecimals []uint8) (*types.Transaction, error) {
	return _CrossbellGateway.contract.Transact(opts, "mapTokens", crossbellTokens, chainIds, mainchainTokens, mainchainTokenDecimals)
}

// MapTokens is a paid mutator transaction binding the contract method 0x0dfd6d30.
//
// Solidity: function mapTokens(address[] crossbellTokens, uint256[] chainIds, address[] mainchainTokens, uint8[] mainchainTokenDecimals) returns()
func (_CrossbellGateway *CrossbellGatewaySession) MapTokens(crossbellTokens []common.Address, chainIds []*big.Int, mainchainTokens []common.Address, mainchainTokenDecimals []uint8) (*types.Transaction, error) {
	return _CrossbellGateway.Contract.MapTokens(&_CrossbellGateway.TransactOpts, crossbellTokens, chainIds, mainchainTokens, mainchainTokenDecimals)
}

// MapTokens is a paid mutator transaction binding the contract method 0x0dfd6d30.
//
// Solidity: function mapTokens(address[] crossbellTokens, uint256[] chainIds, address[] mainchainTokens, uint8[] mainchainTokenDecimals) returns()
func (_CrossbellGateway *CrossbellGatewayTransactorSession) MapTokens(crossbellTokens []common.Address, chainIds []*big.Int, mainchainTokens []common.Address, mainchainTokenDecimals []uint8) (*types.Transaction, error) {
	return _CrossbellGateway.Contract.MapTokens(&_CrossbellGateway.TransactOpts, crossbellTokens, chainIds, mainchainTokens, mainchainTokenDecimals)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_CrossbellGateway *CrossbellGatewayTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CrossbellGateway.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_CrossbellGateway *CrossbellGatewaySession) Pause() (*types.Transaction, error) {
	return _CrossbellGateway.Contract.Pause(&_CrossbellGateway.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_CrossbellGateway *CrossbellGatewayTransactorSession) Pause() (*types.Transaction, error) {
	return _CrossbellGateway.Contract.Pause(&_CrossbellGateway.TransactOpts)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_CrossbellGateway *CrossbellGatewayTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CrossbellGateway.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_CrossbellGateway *CrossbellGatewaySession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CrossbellGateway.Contract.RenounceRole(&_CrossbellGateway.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_CrossbellGateway *CrossbellGatewayTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CrossbellGateway.Contract.RenounceRole(&_CrossbellGateway.TransactOpts, role, account)
}

// RequestWithdrawal is a paid mutator transaction binding the contract method 0xe5001d7c.
//
// Solidity: function requestWithdrawal(uint256 chainId, address recipient, address token, uint256 amount, uint256 fee) returns(uint256 withdrawalId)
func (_CrossbellGateway *CrossbellGatewayTransactor) RequestWithdrawal(opts *bind.TransactOpts, chainId *big.Int, recipient common.Address, token common.Address, amount *big.Int, fee *big.Int) (*types.Transaction, error) {
	return _CrossbellGateway.contract.Transact(opts, "requestWithdrawal", chainId, recipient, token, amount, fee)
}

// RequestWithdrawal is a paid mutator transaction binding the contract method 0xe5001d7c.
//
// Solidity: function requestWithdrawal(uint256 chainId, address recipient, address token, uint256 amount, uint256 fee) returns(uint256 withdrawalId)
func (_CrossbellGateway *CrossbellGatewaySession) RequestWithdrawal(chainId *big.Int, recipient common.Address, token common.Address, amount *big.Int, fee *big.Int) (*types.Transaction, error) {
	return _CrossbellGateway.Contract.RequestWithdrawal(&_CrossbellGateway.TransactOpts, chainId, recipient, token, amount, fee)
}

// RequestWithdrawal is a paid mutator transaction binding the contract method 0xe5001d7c.
//
// Solidity: function requestWithdrawal(uint256 chainId, address recipient, address token, uint256 amount, uint256 fee) returns(uint256 withdrawalId)
func (_CrossbellGateway *CrossbellGatewayTransactorSession) RequestWithdrawal(chainId *big.Int, recipient common.Address, token common.Address, amount *big.Int, fee *big.Int) (*types.Transaction, error) {
	return _CrossbellGateway.Contract.RequestWithdrawal(&_CrossbellGateway.TransactOpts, chainId, recipient, token, amount, fee)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_CrossbellGateway *CrossbellGatewayTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CrossbellGateway.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_CrossbellGateway *CrossbellGatewaySession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CrossbellGateway.Contract.RevokeRole(&_CrossbellGateway.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_CrossbellGateway *CrossbellGatewayTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CrossbellGateway.Contract.RevokeRole(&_CrossbellGateway.TransactOpts, role, account)
}

// SubmitWithdrawalSignature is a paid mutator transaction binding the contract method 0x3e397b03.
//
// Solidity: function submitWithdrawalSignature(uint256 chainId, uint256 withdrawalId, bytes sig) returns()
func (_CrossbellGateway *CrossbellGatewayTransactor) SubmitWithdrawalSignature(opts *bind.TransactOpts, chainId *big.Int, withdrawalId *big.Int, sig []byte) (*types.Transaction, error) {
	return _CrossbellGateway.contract.Transact(opts, "submitWithdrawalSignature", chainId, withdrawalId, sig)
}

// SubmitWithdrawalSignature is a paid mutator transaction binding the contract method 0x3e397b03.
//
// Solidity: function submitWithdrawalSignature(uint256 chainId, uint256 withdrawalId, bytes sig) returns()
func (_CrossbellGateway *CrossbellGatewaySession) SubmitWithdrawalSignature(chainId *big.Int, withdrawalId *big.Int, sig []byte) (*types.Transaction, error) {
	return _CrossbellGateway.Contract.SubmitWithdrawalSignature(&_CrossbellGateway.TransactOpts, chainId, withdrawalId, sig)
}

// SubmitWithdrawalSignature is a paid mutator transaction binding the contract method 0x3e397b03.
//
// Solidity: function submitWithdrawalSignature(uint256 chainId, uint256 withdrawalId, bytes sig) returns()
func (_CrossbellGateway *CrossbellGatewayTransactorSession) SubmitWithdrawalSignature(chainId *big.Int, withdrawalId *big.Int, sig []byte) (*types.Transaction, error) {
	return _CrossbellGateway.Contract.SubmitWithdrawalSignature(&_CrossbellGateway.TransactOpts, chainId, withdrawalId, sig)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_CrossbellGateway *CrossbellGatewayTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CrossbellGateway.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_CrossbellGateway *CrossbellGatewaySession) Unpause() (*types.Transaction, error) {
	return _CrossbellGateway.Contract.Unpause(&_CrossbellGateway.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_CrossbellGateway *CrossbellGatewayTransactorSession) Unpause() (*types.Transaction, error) {
	return _CrossbellGateway.Contract.Unpause(&_CrossbellGateway.TransactOpts)
}

// CrossbellGatewayAckDepositIterator is returned from FilterAckDeposit and is used to iterate over the raw logs and unpacked data for AckDeposit events raised by the CrossbellGateway contract.
type CrossbellGatewayAckDepositIterator struct {
	Event *CrossbellGatewayAckDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CrossbellGatewayAckDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CrossbellGatewayAckDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CrossbellGatewayAckDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CrossbellGatewayAckDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CrossbellGatewayAckDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CrossbellGatewayAckDeposit represents a AckDeposit event raised by the CrossbellGateway contract.
type CrossbellGatewayAckDeposit struct {
	ChainId   *big.Int
	DepositId *big.Int
	Validator common.Address
	Recipient common.Address
	Token     common.Address
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAckDeposit is a free log retrieval operation binding the contract event 0xfd4c94d13bd227d9b35353e8df2621c1182abab14d3cac53d3c7596b9aaabf63.
//
// Solidity: event AckDeposit(uint256 indexed chainId, uint256 indexed depositId, address indexed validator, address recipient, address token, uint256 amount)
func (_CrossbellGateway *CrossbellGatewayFilterer) FilterAckDeposit(opts *bind.FilterOpts, chainId []*big.Int, depositId []*big.Int, validator []common.Address) (*CrossbellGatewayAckDepositIterator, error) {

	var chainIdRule []interface{}
	for _, chainIdItem := range chainId {
		chainIdRule = append(chainIdRule, chainIdItem)
	}
	var depositIdRule []interface{}
	for _, depositIdItem := range depositId {
		depositIdRule = append(depositIdRule, depositIdItem)
	}
	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _CrossbellGateway.contract.FilterLogs(opts, "AckDeposit", chainIdRule, depositIdRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return &CrossbellGatewayAckDepositIterator{contract: _CrossbellGateway.contract, event: "AckDeposit", logs: logs, sub: sub}, nil
}

// WatchAckDeposit is a free log subscription operation binding the contract event 0xfd4c94d13bd227d9b35353e8df2621c1182abab14d3cac53d3c7596b9aaabf63.
//
// Solidity: event AckDeposit(uint256 indexed chainId, uint256 indexed depositId, address indexed validator, address recipient, address token, uint256 amount)
func (_CrossbellGateway *CrossbellGatewayFilterer) WatchAckDeposit(opts *bind.WatchOpts, sink chan<- *CrossbellGatewayAckDeposit, chainId []*big.Int, depositId []*big.Int, validator []common.Address) (event.Subscription, error) {

	var chainIdRule []interface{}
	for _, chainIdItem := range chainId {
		chainIdRule = append(chainIdRule, chainIdItem)
	}
	var depositIdRule []interface{}
	for _, depositIdItem := range depositId {
		depositIdRule = append(depositIdRule, depositIdItem)
	}
	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _CrossbellGateway.contract.WatchLogs(opts, "AckDeposit", chainIdRule, depositIdRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CrossbellGatewayAckDeposit)
				if err := _CrossbellGateway.contract.UnpackLog(event, "AckDeposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAckDeposit is a log parse operation binding the contract event 0xfd4c94d13bd227d9b35353e8df2621c1182abab14d3cac53d3c7596b9aaabf63.
//
// Solidity: event AckDeposit(uint256 indexed chainId, uint256 indexed depositId, address indexed validator, address recipient, address token, uint256 amount)
func (_CrossbellGateway *CrossbellGatewayFilterer) ParseAckDeposit(log types.Log) (*CrossbellGatewayAckDeposit, error) {
	event := new(CrossbellGatewayAckDeposit)
	if err := _CrossbellGateway.contract.UnpackLog(event, "AckDeposit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CrossbellGatewayDepositedIterator is returned from FilterDeposited and is used to iterate over the raw logs and unpacked data for Deposited events raised by the CrossbellGateway contract.
type CrossbellGatewayDepositedIterator struct {
	Event *CrossbellGatewayDeposited // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CrossbellGatewayDepositedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CrossbellGatewayDeposited)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CrossbellGatewayDeposited)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CrossbellGatewayDepositedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CrossbellGatewayDepositedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CrossbellGatewayDeposited represents a Deposited event raised by the CrossbellGateway contract.
type CrossbellGatewayDeposited struct {
	ChainId   *big.Int
	DepositId *big.Int
	Recipient common.Address
	Token     common.Address
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterDeposited is a free log retrieval operation binding the contract event 0x9d14005dbcc66b2c540389545fdfdf05ac52df61de115ebf7216aa3ebf5816b9.
//
// Solidity: event Deposited(uint256 indexed chainId, uint256 indexed depositId, address indexed recipient, address token, uint256 amount)
func (_CrossbellGateway *CrossbellGatewayFilterer) FilterDeposited(opts *bind.FilterOpts, chainId []*big.Int, depositId []*big.Int, recipient []common.Address) (*CrossbellGatewayDepositedIterator, error) {

	var chainIdRule []interface{}
	for _, chainIdItem := range chainId {
		chainIdRule = append(chainIdRule, chainIdItem)
	}
	var depositIdRule []interface{}
	for _, depositIdItem := range depositId {
		depositIdRule = append(depositIdRule, depositIdItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _CrossbellGateway.contract.FilterLogs(opts, "Deposited", chainIdRule, depositIdRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return &CrossbellGatewayDepositedIterator{contract: _CrossbellGateway.contract, event: "Deposited", logs: logs, sub: sub}, nil
}

// WatchDeposited is a free log subscription operation binding the contract event 0x9d14005dbcc66b2c540389545fdfdf05ac52df61de115ebf7216aa3ebf5816b9.
//
// Solidity: event Deposited(uint256 indexed chainId, uint256 indexed depositId, address indexed recipient, address token, uint256 amount)
func (_CrossbellGateway *CrossbellGatewayFilterer) WatchDeposited(opts *bind.WatchOpts, sink chan<- *CrossbellGatewayDeposited, chainId []*big.Int, depositId []*big.Int, recipient []common.Address) (event.Subscription, error) {

	var chainIdRule []interface{}
	for _, chainIdItem := range chainId {
		chainIdRule = append(chainIdRule, chainIdItem)
	}
	var depositIdRule []interface{}
	for _, depositIdItem := range depositId {
		depositIdRule = append(depositIdRule, depositIdItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _CrossbellGateway.contract.WatchLogs(opts, "Deposited", chainIdRule, depositIdRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CrossbellGatewayDeposited)
				if err := _CrossbellGateway.contract.UnpackLog(event, "Deposited", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposited is a log parse operation binding the contract event 0x9d14005dbcc66b2c540389545fdfdf05ac52df61de115ebf7216aa3ebf5816b9.
//
// Solidity: event Deposited(uint256 indexed chainId, uint256 indexed depositId, address indexed recipient, address token, uint256 amount)
func (_CrossbellGateway *CrossbellGatewayFilterer) ParseDeposited(log types.Log) (*CrossbellGatewayDeposited, error) {
	event := new(CrossbellGatewayDeposited)
	if err := _CrossbellGateway.contract.UnpackLog(event, "Deposited", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CrossbellGatewayInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the CrossbellGateway contract.
type CrossbellGatewayInitializedIterator struct {
	Event *CrossbellGatewayInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CrossbellGatewayInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CrossbellGatewayInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CrossbellGatewayInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CrossbellGatewayInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CrossbellGatewayInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CrossbellGatewayInitialized represents a Initialized event raised by the CrossbellGateway contract.
type CrossbellGatewayInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_CrossbellGateway *CrossbellGatewayFilterer) FilterInitialized(opts *bind.FilterOpts) (*CrossbellGatewayInitializedIterator, error) {

	logs, sub, err := _CrossbellGateway.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &CrossbellGatewayInitializedIterator{contract: _CrossbellGateway.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_CrossbellGateway *CrossbellGatewayFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *CrossbellGatewayInitialized) (event.Subscription, error) {

	logs, sub, err := _CrossbellGateway.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CrossbellGatewayInitialized)
				if err := _CrossbellGateway.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_CrossbellGateway *CrossbellGatewayFilterer) ParseInitialized(log types.Log) (*CrossbellGatewayInitialized, error) {
	event := new(CrossbellGatewayInitialized)
	if err := _CrossbellGateway.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CrossbellGatewayPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the CrossbellGateway contract.
type CrossbellGatewayPausedIterator struct {
	Event *CrossbellGatewayPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CrossbellGatewayPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CrossbellGatewayPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CrossbellGatewayPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CrossbellGatewayPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CrossbellGatewayPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CrossbellGatewayPaused represents a Paused event raised by the CrossbellGateway contract.
type CrossbellGatewayPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_CrossbellGateway *CrossbellGatewayFilterer) FilterPaused(opts *bind.FilterOpts) (*CrossbellGatewayPausedIterator, error) {

	logs, sub, err := _CrossbellGateway.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &CrossbellGatewayPausedIterator{contract: _CrossbellGateway.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_CrossbellGateway *CrossbellGatewayFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *CrossbellGatewayPaused) (event.Subscription, error) {

	logs, sub, err := _CrossbellGateway.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CrossbellGatewayPaused)
				if err := _CrossbellGateway.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_CrossbellGateway *CrossbellGatewayFilterer) ParsePaused(log types.Log) (*CrossbellGatewayPaused, error) {
	event := new(CrossbellGatewayPaused)
	if err := _CrossbellGateway.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CrossbellGatewayRequestWithdrawalIterator is returned from FilterRequestWithdrawal and is used to iterate over the raw logs and unpacked data for RequestWithdrawal events raised by the CrossbellGateway contract.
type CrossbellGatewayRequestWithdrawalIterator struct {
	Event *CrossbellGatewayRequestWithdrawal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CrossbellGatewayRequestWithdrawalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CrossbellGatewayRequestWithdrawal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CrossbellGatewayRequestWithdrawal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CrossbellGatewayRequestWithdrawalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CrossbellGatewayRequestWithdrawalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CrossbellGatewayRequestWithdrawal represents a RequestWithdrawal event raised by the CrossbellGateway contract.
type CrossbellGatewayRequestWithdrawal struct {
	ChainId      *big.Int
	WithdrawalId *big.Int
	Recipient    common.Address
	Token        common.Address
	Amount       *big.Int
	Fee          *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterRequestWithdrawal is a free log retrieval operation binding the contract event 0x37347ce0b3ba5929e3851296e482bf7e4a1d9298d09c93d2d0848eac40608d6c.
//
// Solidity: event RequestWithdrawal(uint256 indexed chainId, uint256 indexed withdrawalId, address indexed recipient, address token, uint256 amount, uint256 fee)
func (_CrossbellGateway *CrossbellGatewayFilterer) FilterRequestWithdrawal(opts *bind.FilterOpts, chainId []*big.Int, withdrawalId []*big.Int, recipient []common.Address) (*CrossbellGatewayRequestWithdrawalIterator, error) {

	var chainIdRule []interface{}
	for _, chainIdItem := range chainId {
		chainIdRule = append(chainIdRule, chainIdItem)
	}
	var withdrawalIdRule []interface{}
	for _, withdrawalIdItem := range withdrawalId {
		withdrawalIdRule = append(withdrawalIdRule, withdrawalIdItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _CrossbellGateway.contract.FilterLogs(opts, "RequestWithdrawal", chainIdRule, withdrawalIdRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return &CrossbellGatewayRequestWithdrawalIterator{contract: _CrossbellGateway.contract, event: "RequestWithdrawal", logs: logs, sub: sub}, nil
}

// WatchRequestWithdrawal is a free log subscription operation binding the contract event 0x37347ce0b3ba5929e3851296e482bf7e4a1d9298d09c93d2d0848eac40608d6c.
//
// Solidity: event RequestWithdrawal(uint256 indexed chainId, uint256 indexed withdrawalId, address indexed recipient, address token, uint256 amount, uint256 fee)
func (_CrossbellGateway *CrossbellGatewayFilterer) WatchRequestWithdrawal(opts *bind.WatchOpts, sink chan<- *CrossbellGatewayRequestWithdrawal, chainId []*big.Int, withdrawalId []*big.Int, recipient []common.Address) (event.Subscription, error) {

	var chainIdRule []interface{}
	for _, chainIdItem := range chainId {
		chainIdRule = append(chainIdRule, chainIdItem)
	}
	var withdrawalIdRule []interface{}
	for _, withdrawalIdItem := range withdrawalId {
		withdrawalIdRule = append(withdrawalIdRule, withdrawalIdItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _CrossbellGateway.contract.WatchLogs(opts, "RequestWithdrawal", chainIdRule, withdrawalIdRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CrossbellGatewayRequestWithdrawal)
				if err := _CrossbellGateway.contract.UnpackLog(event, "RequestWithdrawal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRequestWithdrawal is a log parse operation binding the contract event 0x37347ce0b3ba5929e3851296e482bf7e4a1d9298d09c93d2d0848eac40608d6c.
//
// Solidity: event RequestWithdrawal(uint256 indexed chainId, uint256 indexed withdrawalId, address indexed recipient, address token, uint256 amount, uint256 fee)
func (_CrossbellGateway *CrossbellGatewayFilterer) ParseRequestWithdrawal(log types.Log) (*CrossbellGatewayRequestWithdrawal, error) {
	event := new(CrossbellGatewayRequestWithdrawal)
	if err := _CrossbellGateway.contract.UnpackLog(event, "RequestWithdrawal", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CrossbellGatewayRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the CrossbellGateway contract.
type CrossbellGatewayRoleAdminChangedIterator struct {
	Event *CrossbellGatewayRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CrossbellGatewayRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CrossbellGatewayRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CrossbellGatewayRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CrossbellGatewayRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CrossbellGatewayRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CrossbellGatewayRoleAdminChanged represents a RoleAdminChanged event raised by the CrossbellGateway contract.
type CrossbellGatewayRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_CrossbellGateway *CrossbellGatewayFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*CrossbellGatewayRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _CrossbellGateway.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &CrossbellGatewayRoleAdminChangedIterator{contract: _CrossbellGateway.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_CrossbellGateway *CrossbellGatewayFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *CrossbellGatewayRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _CrossbellGateway.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CrossbellGatewayRoleAdminChanged)
				if err := _CrossbellGateway.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_CrossbellGateway *CrossbellGatewayFilterer) ParseRoleAdminChanged(log types.Log) (*CrossbellGatewayRoleAdminChanged, error) {
	event := new(CrossbellGatewayRoleAdminChanged)
	if err := _CrossbellGateway.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CrossbellGatewayRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the CrossbellGateway contract.
type CrossbellGatewayRoleGrantedIterator struct {
	Event *CrossbellGatewayRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CrossbellGatewayRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CrossbellGatewayRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CrossbellGatewayRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CrossbellGatewayRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CrossbellGatewayRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CrossbellGatewayRoleGranted represents a RoleGranted event raised by the CrossbellGateway contract.
type CrossbellGatewayRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_CrossbellGateway *CrossbellGatewayFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*CrossbellGatewayRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _CrossbellGateway.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &CrossbellGatewayRoleGrantedIterator{contract: _CrossbellGateway.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_CrossbellGateway *CrossbellGatewayFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *CrossbellGatewayRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _CrossbellGateway.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CrossbellGatewayRoleGranted)
				if err := _CrossbellGateway.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_CrossbellGateway *CrossbellGatewayFilterer) ParseRoleGranted(log types.Log) (*CrossbellGatewayRoleGranted, error) {
	event := new(CrossbellGatewayRoleGranted)
	if err := _CrossbellGateway.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CrossbellGatewayRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the CrossbellGateway contract.
type CrossbellGatewayRoleRevokedIterator struct {
	Event *CrossbellGatewayRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CrossbellGatewayRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CrossbellGatewayRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CrossbellGatewayRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CrossbellGatewayRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CrossbellGatewayRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CrossbellGatewayRoleRevoked represents a RoleRevoked event raised by the CrossbellGateway contract.
type CrossbellGatewayRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_CrossbellGateway *CrossbellGatewayFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*CrossbellGatewayRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _CrossbellGateway.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &CrossbellGatewayRoleRevokedIterator{contract: _CrossbellGateway.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_CrossbellGateway *CrossbellGatewayFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *CrossbellGatewayRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _CrossbellGateway.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CrossbellGatewayRoleRevoked)
				if err := _CrossbellGateway.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_CrossbellGateway *CrossbellGatewayFilterer) ParseRoleRevoked(log types.Log) (*CrossbellGatewayRoleRevoked, error) {
	event := new(CrossbellGatewayRoleRevoked)
	if err := _CrossbellGateway.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CrossbellGatewaySubmitWithdrawalSignatureIterator is returned from FilterSubmitWithdrawalSignature and is used to iterate over the raw logs and unpacked data for SubmitWithdrawalSignature events raised by the CrossbellGateway contract.
type CrossbellGatewaySubmitWithdrawalSignatureIterator struct {
	Event *CrossbellGatewaySubmitWithdrawalSignature // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CrossbellGatewaySubmitWithdrawalSignatureIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CrossbellGatewaySubmitWithdrawalSignature)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CrossbellGatewaySubmitWithdrawalSignature)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CrossbellGatewaySubmitWithdrawalSignatureIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CrossbellGatewaySubmitWithdrawalSignatureIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CrossbellGatewaySubmitWithdrawalSignature represents a SubmitWithdrawalSignature event raised by the CrossbellGateway contract.
type CrossbellGatewaySubmitWithdrawalSignature struct {
	ChainId      *big.Int
	WithdrawalId *big.Int
	Validator    common.Address
	Signature    []byte
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterSubmitWithdrawalSignature is a free log retrieval operation binding the contract event 0xf8937107156d7b7d7b390c1fa7ef6deb7efe4984e92b58cab8b82b16e727e8aa.
//
// Solidity: event SubmitWithdrawalSignature(uint256 indexed chainId, uint256 indexed withdrawalId, address indexed validator, bytes signature)
func (_CrossbellGateway *CrossbellGatewayFilterer) FilterSubmitWithdrawalSignature(opts *bind.FilterOpts, chainId []*big.Int, withdrawalId []*big.Int, validator []common.Address) (*CrossbellGatewaySubmitWithdrawalSignatureIterator, error) {

	var chainIdRule []interface{}
	for _, chainIdItem := range chainId {
		chainIdRule = append(chainIdRule, chainIdItem)
	}
	var withdrawalIdRule []interface{}
	for _, withdrawalIdItem := range withdrawalId {
		withdrawalIdRule = append(withdrawalIdRule, withdrawalIdItem)
	}
	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _CrossbellGateway.contract.FilterLogs(opts, "SubmitWithdrawalSignature", chainIdRule, withdrawalIdRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return &CrossbellGatewaySubmitWithdrawalSignatureIterator{contract: _CrossbellGateway.contract, event: "SubmitWithdrawalSignature", logs: logs, sub: sub}, nil
}

// WatchSubmitWithdrawalSignature is a free log subscription operation binding the contract event 0xf8937107156d7b7d7b390c1fa7ef6deb7efe4984e92b58cab8b82b16e727e8aa.
//
// Solidity: event SubmitWithdrawalSignature(uint256 indexed chainId, uint256 indexed withdrawalId, address indexed validator, bytes signature)
func (_CrossbellGateway *CrossbellGatewayFilterer) WatchSubmitWithdrawalSignature(opts *bind.WatchOpts, sink chan<- *CrossbellGatewaySubmitWithdrawalSignature, chainId []*big.Int, withdrawalId []*big.Int, validator []common.Address) (event.Subscription, error) {

	var chainIdRule []interface{}
	for _, chainIdItem := range chainId {
		chainIdRule = append(chainIdRule, chainIdItem)
	}
	var withdrawalIdRule []interface{}
	for _, withdrawalIdItem := range withdrawalId {
		withdrawalIdRule = append(withdrawalIdRule, withdrawalIdItem)
	}
	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _CrossbellGateway.contract.WatchLogs(opts, "SubmitWithdrawalSignature", chainIdRule, withdrawalIdRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CrossbellGatewaySubmitWithdrawalSignature)
				if err := _CrossbellGateway.contract.UnpackLog(event, "SubmitWithdrawalSignature", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSubmitWithdrawalSignature is a log parse operation binding the contract event 0xf8937107156d7b7d7b390c1fa7ef6deb7efe4984e92b58cab8b82b16e727e8aa.
//
// Solidity: event SubmitWithdrawalSignature(uint256 indexed chainId, uint256 indexed withdrawalId, address indexed validator, bytes signature)
func (_CrossbellGateway *CrossbellGatewayFilterer) ParseSubmitWithdrawalSignature(log types.Log) (*CrossbellGatewaySubmitWithdrawalSignature, error) {
	event := new(CrossbellGatewaySubmitWithdrawalSignature)
	if err := _CrossbellGateway.contract.UnpackLog(event, "SubmitWithdrawalSignature", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CrossbellGatewayTokenMappedIterator is returned from FilterTokenMapped and is used to iterate over the raw logs and unpacked data for TokenMapped events raised by the CrossbellGateway contract.
type CrossbellGatewayTokenMappedIterator struct {
	Event *CrossbellGatewayTokenMapped // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CrossbellGatewayTokenMappedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CrossbellGatewayTokenMapped)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CrossbellGatewayTokenMapped)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CrossbellGatewayTokenMappedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CrossbellGatewayTokenMappedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CrossbellGatewayTokenMapped represents a TokenMapped event raised by the CrossbellGateway contract.
type CrossbellGatewayTokenMapped struct {
	CrossbellTokens        []common.Address
	ChainIds               []*big.Int
	MainchainTokens        []common.Address
	MainchainTokenDecimals []uint8
	Raw                    types.Log // Blockchain specific contextual infos
}

// FilterTokenMapped is a free log retrieval operation binding the contract event 0x31d4b1fa0df2a18e3af7daa11a5bae2a184d37f7b10d162c1fee575c489cc567.
//
// Solidity: event TokenMapped(address[] crossbellTokens, uint256[] chainIds, address[] mainchainTokens, uint8[] mainchainTokenDecimals)
func (_CrossbellGateway *CrossbellGatewayFilterer) FilterTokenMapped(opts *bind.FilterOpts) (*CrossbellGatewayTokenMappedIterator, error) {

	logs, sub, err := _CrossbellGateway.contract.FilterLogs(opts, "TokenMapped")
	if err != nil {
		return nil, err
	}
	return &CrossbellGatewayTokenMappedIterator{contract: _CrossbellGateway.contract, event: "TokenMapped", logs: logs, sub: sub}, nil
}

// WatchTokenMapped is a free log subscription operation binding the contract event 0x31d4b1fa0df2a18e3af7daa11a5bae2a184d37f7b10d162c1fee575c489cc567.
//
// Solidity: event TokenMapped(address[] crossbellTokens, uint256[] chainIds, address[] mainchainTokens, uint8[] mainchainTokenDecimals)
func (_CrossbellGateway *CrossbellGatewayFilterer) WatchTokenMapped(opts *bind.WatchOpts, sink chan<- *CrossbellGatewayTokenMapped) (event.Subscription, error) {

	logs, sub, err := _CrossbellGateway.contract.WatchLogs(opts, "TokenMapped")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CrossbellGatewayTokenMapped)
				if err := _CrossbellGateway.contract.UnpackLog(event, "TokenMapped", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTokenMapped is a log parse operation binding the contract event 0x31d4b1fa0df2a18e3af7daa11a5bae2a184d37f7b10d162c1fee575c489cc567.
//
// Solidity: event TokenMapped(address[] crossbellTokens, uint256[] chainIds, address[] mainchainTokens, uint8[] mainchainTokenDecimals)
func (_CrossbellGateway *CrossbellGatewayFilterer) ParseTokenMapped(log types.Log) (*CrossbellGatewayTokenMapped, error) {
	event := new(CrossbellGatewayTokenMapped)
	if err := _CrossbellGateway.contract.UnpackLog(event, "TokenMapped", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CrossbellGatewayUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the CrossbellGateway contract.
type CrossbellGatewayUnpausedIterator struct {
	Event *CrossbellGatewayUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CrossbellGatewayUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CrossbellGatewayUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CrossbellGatewayUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CrossbellGatewayUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CrossbellGatewayUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CrossbellGatewayUnpaused represents a Unpaused event raised by the CrossbellGateway contract.
type CrossbellGatewayUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_CrossbellGateway *CrossbellGatewayFilterer) FilterUnpaused(opts *bind.FilterOpts) (*CrossbellGatewayUnpausedIterator, error) {

	logs, sub, err := _CrossbellGateway.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &CrossbellGatewayUnpausedIterator{contract: _CrossbellGateway.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_CrossbellGateway *CrossbellGatewayFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *CrossbellGatewayUnpaused) (event.Subscription, error) {

	logs, sub, err := _CrossbellGateway.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CrossbellGatewayUnpaused)
				if err := _CrossbellGateway.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_CrossbellGateway *CrossbellGatewayFilterer) ParseUnpaused(log types.Log) (*CrossbellGatewayUnpaused, error) {
	event := new(CrossbellGatewayUnpaused)
	if err := _CrossbellGateway.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
