// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package mainchainGateway

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// DataTypesMappedToken is an auto generated low-level Go binding around an user-defined struct.
type DataTypesMappedToken struct {
	Token    common.Address
	Decimals uint8
}

// DataTypesSignature is an auto generated low-level Go binding around an user-defined struct.
type DataTypesSignature struct {
	V uint8
	R [32]byte
	S [32]byte
}

// MainchainGatewayMetaData contains all meta data concerning the MainchainGateway contract.
var MainchainGatewayMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"quotas\",\"type\":\"uint256[]\"}],\"name\":\"DailyWithdrawalMaxQuotasUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"depositHash\",\"type\":\"bytes32\"}],\"name\":\"RequestDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"mainchainTokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"crossbellTokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"crossbellTokenDecimals\",\"type\":\"uint8[]\"}],\"name\":\"TokenMapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"withdrawalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Withdrew\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mainchainToken\",\"type\":\"address\"}],\"name\":\"getCrossbellToken\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"structDataTypes.MappedToken\",\"name\":\"token\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getDailyWithdrawalMaxQuota\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getDailyWithdrawalRemainingQuota\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidatorContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawalId\",\"type\":\"uint256\"}],\"name\":\"getWithdrawalHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"mainchainTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"dailyWithdrawalMaxQuota\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"crossbellTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"crossbellTokenDecimals\",\"type\":\"uint8[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"mainchainTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"crossbellTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"crossbellTokenDecimals\",\"type\":\"uint8[]\"}],\"name\":\"mapTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"requestDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quotas\",\"type\":\"uint256[]\"}],\"name\":\"setDailyWithdrawalMaxQuotas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"structDataTypes.Signature[]\",\"name\":\"signatures\",\"type\":\"tuple[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50600180556002805460ff191690556128738061002e6000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c806375b238fc116100de578063a26b290611610097578063ca15c87311610071578063ca15c87314610359578063d547741f1461036c578063ec20ce981461037f578063ed24911d1461039f57600080fd5b8063a26b29061461030a578063abd5dd6d1461031d578063b368daa51461033057600080fd5b806375b238fc146102b75780638456cb59146102cc5780639010d07c146102d457806391d14854146102e75780639363a141146102fa578063a217fddf1461030257600080fd5b806336568abe1161013057806336568abe1461021f5780633f4ba83a146102325780634e207f621461023a5780635c975abb146102745780636f94c5e91461027f57806372bc707c146102a457600080fd5b806301ffc9a7146101785780631b6e7594146101a0578063248a9ca3146101b55780632a9fdb6f146101e65780632d8c9731146101f95780632f2ff15d1461020c575b600080fd5b61018b610186366004611f96565b6103a7565b60405190151581526020015b60405180910390f35b6101b36101ae36600461200c565b6103d2565b005b6101d86101c33660046120a6565b60009081526003602052604090206001015490565b604051908152602001610197565b6101d86101f43660046120db565b610407565b6101b3610207366004612117565b6105b4565b6101b361021a3660046121d4565b610820565b6101b361022d3660046121d4565b61084a565b6101b36108c8565b61024d610248366004612200565b6108f3565b6040805182516001600160a01b0316815260209283015160ff169281019290925201610197565b60025460ff1661018b565b6006546001600160a01b03165b6040516001600160a01b039091168152602001610197565b6101b36102b236600461221b565b610910565b6101d860008051602061281e83398151915281565b6101b361093b565b61028c6102e2366004612287565b610963565b61018b6102f53660046121d4565b61097b565b6007546101d8565b6101d8600081565b6101b36103183660046122a9565b6109a6565b6101d861032b366004612200565b610b14565b6101d861033e366004612200565b6001600160a01b031660009081526009602052604090205490565b6101d86103673660046120a6565b610b93565b6101b361037a3660046121d4565b610baa565b6101d861038d3660046120a6565b60009081526008602052604090205490565b6005546101d8565b60006001600160e01b03198216635a05180f60e01b14806103cc57506103cc82610bcf565b92915050565b60008051602061281e8339815191526103ea81610c04565b85156103fe576103fe878787878787610c0e565b50505050505050565b6000610411610da5565b610419610dff565b6000821161045b5760405162461bcd60e51b815260206004820152600a60248201526916995c9bd05b5bdd5b9d60b21b60448201526064015b60405180910390fd5b600061046684610e47565b80519091506001600160a01b03166104b35760405162461bcd60e51b815260206004820152601060248201526f2ab739bab83837b93a32b22a37b5b2b760811b6044820152606401610452565b6104c86001600160a01b038516333086610e94565b60006104d985858460200151610f05565b600780546001810190915593509050600046835160408051602081019390935282018690526bffffffffffffffffffffffff1960608a811b8216818501529190911b1660748201526088810183905260a801604051602081830303815290604052805190602001209050866001600160a01b0316846105554690565b8551604080516001600160a01b0390921682526020820187905281018590527fff75133ac9053ca6fbd0c66c2baa995eccf6af80a2443af16f843ef3766b773a9060600160405180910390a45050506105ad60018055565b9392505050565b6105bc610da5565b6105c4610dff565b4688146106045760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5910da185a5b925960921b6044820152606401610452565b600087815260086020526040902054156106535760405162461bcd60e51b815260206004820152601060248201526f139bdd13995dd5da5d1a191c985dd85b60821b6044820152606401610452565b61065d8585610fc6565b156106aa5760405162461bcd60e51b815260206004820152601760248201527f4461696c795769746864726177616c4d617851756f74610000000000000000006044820152606401610452565b600554604080516020810192909252810189905260608082018990526bffffffffffffffffffffffff1988821b811660808401529087901b16609482015260a8810185905260c8810184905260009060e80160405160208183030381529060405280519060200120905061071f818484611064565b61076b5760405162461bcd60e51b815260206004820152601c60248201527f496e73756666696369656e745369676e6174757265734e756d626572000000006044820152606401610452565b600088815260086020526040902081905561078686866112aa565b6107a58761079486886123a7565b6001600160a01b038916919061133a565b6107b96001600160a01b038716338661133a565b604080516001600160a01b038881168252602082018890529181018690529088169089908b907fed817c2d779177ce2e9ac87382f2b4c9b66d4fd65ddaec2f77ac7919f3dd90349060600160405180910390a45061081660018055565b5050505050505050565b60008281526003602052604090206001015461083b81610c04565b610845838361136a565b505050565b6001600160a01b03811633146108ba5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610452565b6108c4828261138c565b5050565b6108d06113ae565b60008051602061281e8339815191526108e881610c04565b6108f06113f7565b50565b60408051808201909152600080825260208201526103cc82610e47565b60008051602061281e83398151915261092881610c04565b61093485858585611449565b5050505050565b610943610dff565b60008051602061281e83398151915261095b81610c04565b6108f061154c565b60008281526004602052604081206105ad9083611589565b60009182526003602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600054610100900460ff16158080156109c65750600054600160ff909116105b806109e05750303b1580156109e0575060005460ff166001145b610a435760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610452565b6000805460ff191660011790558015610a66576000805461ff0019166101001790555b600680546001600160a01b0319166001600160a01b038d16179055610a89611595565b8715610a9d57610a9d898987878787610c0e565b610aa989898989611449565b610ac160008051602061281e8339815191528b611675565b8015610b07576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050505050565b600080610b2462015180426123be565b6001600160a01b0384166000908152600b6020526040902054909150811115610b645750506001600160a01b031660009081526009602052604090205490565b6001600160a01b0383166000908152600a60209081526040808320546009909252909120546105ad91906123a7565b60008181526004602052604081206103cc9061167f565b600082815260036020526040902060010154610bc581610c04565b610845838361138c565b60006001600160e01b03198216637965db0b60e01b14806103cc57506301ffc9a760e01b6001600160e01b03198316146103cc565b6108f08133611689565b8483148015610c1c57508481145b610c5d5760405162461bcd60e51b8152602060048201526012602482015271092dcecc2d8d2c882e4e4c2f298cadccee8d60731b6044820152606401610452565b60005b85811015610d5b576040518060400160405280868684818110610c8557610c856123e0565b9050602002016020810190610c9a9190612200565b6001600160a01b03168152602001848484818110610cba57610cba6123e0565b9050602002016020810190610ccf9190612405565b60ff169052600c6000898985818110610cea57610cea6123e0565b9050602002016020810190610cff9190612200565b6001600160a01b039081168252602080830193909352604090910160002083518154949093015160ff16600160a01b026001600160a81b0319909416929091169190911791909117905580610d5381612422565b915050610c60565b507fa4f03cc9c0e0aeb5b71b4ec800702753f65748c2cf3064695ba8e8b46be70444868686868686604051610d9596959493929190612484565b60405180910390a1505050505050565b60026001541415610df85760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610452565b6002600155565b60025460ff1615610e455760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610452565b565b604080518082018252600080825260209182018190526001600160a01b039384168152600c82528290208251808401909352549283168252600160a01b90920460ff169181019190915290565b6040516001600160a01b0380851660248301528316604482015260648101829052610eff9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526116e2565b50505050565b600080846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6a91906124f6565b90508060ff168360ff161015610f9e57610f848382612513565b610f8f90600a61261a565b610f9990856123be565b610fbd565b610fa88184612513565b610fb390600a61261a565b610fbd9085612629565b95945050505050565b600080610fd662015180426123be565b6001600160a01b0385166000908152600b602052604090205490915081111561101c5750506001600160a01b0382166000908152600960205260409020548110156103cc565b6001600160a01b0384166000908152600a6020526040902054611040908490612648565b6001600160a01b038516600090815260096020526040902054111591506103cc9050565b6000806110be856040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b905060008060005b858110156112315760006111448888848181106110e5576110e56123e0565b6110fb9260206060909202019081019150612405565b89898581811061110d5761110d6123e0565b905060600201602001358a8a86818110611129576111296123e0565b90506060020160400135886117b4909392919063ffffffff16565b60065460405163facd743b60e01b81526001600160a01b03808416600483015292935091169063facd743b90602401602060405180830381865afa158015611190573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b49190612660565b156111c757836111c381612422565b9450505b826001600160a01b0316816001600160a01b03161161121d5760405162461bcd60e51b815260206004820152601260248201527124b73b30b634b229b4b3b732b927b93232b960711b6044820152606401610452565b91508061122981612422565b9150506110c6565b50600654604051631b5f5c8160e31b8152600481018490526001600160a01b039091169063dafae40890602401602060405180830381865afa15801561127b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129f9190612660565b979650505050505050565b60006112b962015180426123be565b6001600160a01b0384166000908152600b6020526040902054909150811115611308576001600160a01b03929092166000908152600b6020908152604080832094909455600a90529190912055565b6001600160a01b0383166000908152600a602052604081208054849290611330908490612648565b9091555050505050565b6040516001600160a01b03831660248201526044810182905261084590849063a9059cbb60e01b90606401610ec8565b61137482826117de565b60008281526004602052604090206108459082611864565b6113968282611879565b600082815260046020526040902061084590826118e0565b60025460ff16610e455760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610452565b6113ff6113ae565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b82811461148d5760405162461bcd60e51b8152602060048201526012602482015271092dcecc2d8d2c882e4e4c2f298cadccee8d60731b6044820152606401610452565b60005b83811015611508578282828181106114aa576114aa6123e0565b90506020020135600960008787858181106114c7576114c76123e0565b90506020020160208101906114dc9190612200565b6001600160a01b031681526020810191909152604001600020558061150081612422565b915050611490565b507f45a5bd79aaf299411b8b054095f05ebb133bccc05e745fd2f3ed6d1dbcbef6568484848460405161153e9493929190612682565b60405180910390a150505050565b611554610dff565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861142c3390565b60006105ad83836118f5565b7fd87cd6ef79d4e2b95e15ce8abf732db51ec771f1ca2edccf22a46c729ac564727f4ababcdb514ada2790bc91f1f42d1c43943189dd81a96e6e99951a5009bc29c17fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc646304260405160200161160d91815260200190565b60408051601f19818403018152828252805160209182012090830197909752810194909452606084019290925260808301526001600160a01b031660a082015260c081019190915260e00160408051601f198184030181529190528051602090910120600555565b6108c4828261136a565b60006103cc825490565b611693828261097b565b6108c4576116a08161191f565b6116ab836020611931565b6040516020016116bc929190612700565b60408051601f198184030181529082905262461bcd60e51b825261045291600401612775565b6000611737826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611acd9092919063ffffffff16565b80519091501561084557808060200190518101906117559190612660565b6108455760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610452565b60008060006117c587878787611adc565b915091506117d281611ba0565b5090505b949350505050565b6117e8828261097b565b6108c45760008281526003602090815260408083206001600160a01b03851684529091529020805460ff191660011790556118203390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006105ad836001600160a01b038416611cee565b611883828261097b565b156108c45760008281526003602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006105ad836001600160a01b038416611d3d565b600082600001828154811061190c5761190c6123e0565b9060005260206000200154905092915050565b60606103cc6001600160a01b03831660145b60606000611940836002612629565b61194b906002612648565b67ffffffffffffffff811115611963576119636127a8565b6040519080825280601f01601f19166020018201604052801561198d576020820181803683370190505b509050600360fc1b816000815181106119a8576119a86123e0565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106119d7576119d76123e0565b60200101906001600160f81b031916908160001a90535060006119fb846002612629565b611a06906001612648565b90505b6001811115611a7e576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611a3a57611a3a6123e0565b1a60f81b828281518110611a5057611a506123e0565b60200101906001600160f81b031916908160001a90535060049490941c93611a77816127be565b9050611a09565b5083156105ad5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610452565b60606117d68484600085611e30565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611b135750600090506003611b97565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611b67573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611b9057600060019250925050611b97565b9150600090505b94509492505050565b6000816004811115611bb457611bb46127d5565b1415611bbd5750565b6001816004811115611bd157611bd16127d5565b1415611c1f5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610452565b6002816004811115611c3357611c336127d5565b1415611c815760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610452565b6003816004811115611c9557611c956127d5565b14156108f05760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610452565b6000818152600183016020526040812054611d35575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556103cc565b5060006103cc565b60008181526001830160205260408120548015611e26576000611d616001836123a7565b8554909150600090611d75906001906123a7565b9050818114611dda576000866000018281548110611d9557611d956123e0565b9060005260206000200154905080876000018481548110611db857611db86123e0565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611deb57611deb6127eb565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506103cc565b60009150506103cc565b606082471015611e915760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610452565b600080866001600160a01b03168587604051611ead9190612801565b60006040518083038185875af1925050503d8060008114611eea576040519150601f19603f3d011682016040523d82523d6000602084013e611eef565b606091505b509150915061129f8783838760608315611f67578251611f60576001600160a01b0385163b611f605760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610452565b50816117d6565b6117d68383815115611f7c5781518083602001fd5b8060405162461bcd60e51b81526004016104529190612775565b600060208284031215611fa857600080fd5b81356001600160e01b0319811681146105ad57600080fd5b60008083601f840112611fd257600080fd5b50813567ffffffffffffffff811115611fea57600080fd5b6020830191508360208260051b850101111561200557600080fd5b9250929050565b6000806000806000806060878903121561202557600080fd5b863567ffffffffffffffff8082111561203d57600080fd5b6120498a838b01611fc0565b9098509650602089013591508082111561206257600080fd5b61206e8a838b01611fc0565b9096509450604089013591508082111561208757600080fd5b5061209489828a01611fc0565b979a9699509497509295939492505050565b6000602082840312156120b857600080fd5b5035919050565b80356001600160a01b03811681146120d657600080fd5b919050565b6000806000606084860312156120f057600080fd5b6120f9846120bf565b9250612107602085016120bf565b9150604084013590509250925092565b60008060008060008060008060e0898b03121561213357600080fd5b883597506020890135965061214a60408a016120bf565b955061215860608a016120bf565b94506080890135935060a0890135925060c089013567ffffffffffffffff8082111561218357600080fd5b818b0191508b601f83011261219757600080fd5b8135818111156121a657600080fd5b8c60206060830285010111156121bb57600080fd5b6020830194508093505050509295985092959890939650565b600080604083850312156121e757600080fd5b823591506121f7602084016120bf565b90509250929050565b60006020828403121561221257600080fd5b6105ad826120bf565b6000806000806040858703121561223157600080fd5b843567ffffffffffffffff8082111561224957600080fd5b61225588838901611fc0565b9096509450602087013591508082111561226e57600080fd5b5061227b87828801611fc0565b95989497509550505050565b6000806040838503121561229a57600080fd5b50508035926020909101359150565b60008060008060008060008060008060c08b8d0312156122c857600080fd5b6122d18b6120bf565b99506122df60208c016120bf565b985060408b013567ffffffffffffffff808211156122fc57600080fd5b6123088e838f01611fc0565b909a50985060608d013591508082111561232157600080fd5b61232d8e838f01611fc0565b909850965060808d013591508082111561234657600080fd5b6123528e838f01611fc0565b909650945060a08d013591508082111561236b57600080fd5b506123788d828e01611fc0565b915080935050809150509295989b9194979a5092959850565b634e487b7160e01b600052601160045260246000fd5b6000828210156123b9576123b9612391565b500390565b6000826123db57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b60ff811681146108f057600080fd5b60006020828403121561241757600080fd5b81356105ad816123f6565b600060001982141561243657612436612391565b5060010190565b8183526000602080850194508260005b85811015612479576001600160a01b03612466836120bf565b168752958201959082019060010161244d565b509495945050505050565b60608152600061249860608301888a61243d565b6020838203818501526124ac82888a61243d565b8481036040860152858152869250810160005b868110156124e75783356124d2816123f6565b60ff16825292820192908201906001016124bf565b509a9950505050505050505050565b60006020828403121561250857600080fd5b81516105ad816123f6565b600060ff821660ff84168082101561252d5761252d612391565b90039392505050565b600181815b8085111561257157816000190482111561255757612557612391565b8085161561256457918102915b93841c939080029061253b565b509250929050565b600082612588575060016103cc565b81612595575060006103cc565b81600181146125ab57600281146125b5576125d1565b60019150506103cc565b60ff8411156125c6576125c6612391565b50506001821b6103cc565b5060208310610133831016604e8410600b84101617156125f4575081810a6103cc565b6125fe8383612536565b806000190482111561261257612612612391565b029392505050565b60006105ad60ff841683612579565b600081600019048311821515161561264357612643612391565b500290565b6000821982111561265b5761265b612391565b500190565b60006020828403121561267257600080fd5b815180151581146105ad57600080fd5b60408152600061269660408301868861243d565b82810360208401528381526001600160fb1b038411156126b557600080fd5b8360051b80866020840137600091016020019081529695505050505050565b60005b838110156126ef5781810151838201526020016126d7565b83811115610eff5750506000910152565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516127388160178501602088016126d4565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516127698160288401602088016126d4565b01602801949350505050565b60208152600082518060208401526127948160408501602087016126d4565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b6000816127cd576127cd612391565b506000190190565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b600082516128138184602087016126d4565b919091019291505056fea49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a2646970667358221220d86da49f157d4cf4aec76b3cabf39f3e4386a8a020bc3d327deabe8618adb44464736f6c634300080a0033",
}

// MainchainGatewayABI is the input ABI used to generate the binding from.
// Deprecated: Use MainchainGatewayMetaData.ABI instead.
var MainchainGatewayABI = MainchainGatewayMetaData.ABI

// MainchainGatewayBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MainchainGatewayMetaData.Bin instead.
var MainchainGatewayBin = MainchainGatewayMetaData.Bin

// DeployMainchainGateway deploys a new Ethereum contract, binding an instance of MainchainGateway to it.
func DeployMainchainGateway(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *MainchainGateway, error) {
	parsed, err := MainchainGatewayMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MainchainGatewayBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MainchainGateway{MainchainGatewayCaller: MainchainGatewayCaller{contract: contract}, MainchainGatewayTransactor: MainchainGatewayTransactor{contract: contract}, MainchainGatewayFilterer: MainchainGatewayFilterer{contract: contract}}, nil
}

// MainchainGateway is an auto generated Go binding around an Ethereum contract.
type MainchainGateway struct {
	MainchainGatewayCaller     // Read-only binding to the contract
	MainchainGatewayTransactor // Write-only binding to the contract
	MainchainGatewayFilterer   // Log filterer for contract events
}

// MainchainGatewayCaller is an auto generated read-only Go binding around an Ethereum contract.
type MainchainGatewayCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MainchainGatewayTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MainchainGatewayTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MainchainGatewayFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MainchainGatewayFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MainchainGatewaySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MainchainGatewaySession struct {
	Contract     *MainchainGateway // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MainchainGatewayCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MainchainGatewayCallerSession struct {
	Contract *MainchainGatewayCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// MainchainGatewayTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MainchainGatewayTransactorSession struct {
	Contract     *MainchainGatewayTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// MainchainGatewayRaw is an auto generated low-level Go binding around an Ethereum contract.
type MainchainGatewayRaw struct {
	Contract *MainchainGateway // Generic contract binding to access the raw methods on
}

// MainchainGatewayCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MainchainGatewayCallerRaw struct {
	Contract *MainchainGatewayCaller // Generic read-only contract binding to access the raw methods on
}

// MainchainGatewayTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MainchainGatewayTransactorRaw struct {
	Contract *MainchainGatewayTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMainchainGateway creates a new instance of MainchainGateway, bound to a specific deployed contract.
func NewMainchainGateway(address common.Address, backend bind.ContractBackend) (*MainchainGateway, error) {
	contract, err := bindMainchainGateway(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MainchainGateway{MainchainGatewayCaller: MainchainGatewayCaller{contract: contract}, MainchainGatewayTransactor: MainchainGatewayTransactor{contract: contract}, MainchainGatewayFilterer: MainchainGatewayFilterer{contract: contract}}, nil
}

// NewMainchainGatewayCaller creates a new read-only instance of MainchainGateway, bound to a specific deployed contract.
func NewMainchainGatewayCaller(address common.Address, caller bind.ContractCaller) (*MainchainGatewayCaller, error) {
	contract, err := bindMainchainGateway(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MainchainGatewayCaller{contract: contract}, nil
}

// NewMainchainGatewayTransactor creates a new write-only instance of MainchainGateway, bound to a specific deployed contract.
func NewMainchainGatewayTransactor(address common.Address, transactor bind.ContractTransactor) (*MainchainGatewayTransactor, error) {
	contract, err := bindMainchainGateway(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MainchainGatewayTransactor{contract: contract}, nil
}

// NewMainchainGatewayFilterer creates a new log filterer instance of MainchainGateway, bound to a specific deployed contract.
func NewMainchainGatewayFilterer(address common.Address, filterer bind.ContractFilterer) (*MainchainGatewayFilterer, error) {
	contract, err := bindMainchainGateway(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MainchainGatewayFilterer{contract: contract}, nil
}

// bindMainchainGateway binds a generic wrapper to an already deployed contract.
func bindMainchainGateway(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MainchainGatewayABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MainchainGateway *MainchainGatewayRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MainchainGateway.Contract.MainchainGatewayCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MainchainGateway *MainchainGatewayRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MainchainGateway.Contract.MainchainGatewayTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MainchainGateway *MainchainGatewayRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MainchainGateway.Contract.MainchainGatewayTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MainchainGateway *MainchainGatewayCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MainchainGateway.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MainchainGateway *MainchainGatewayTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MainchainGateway.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MainchainGateway *MainchainGatewayTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MainchainGateway.Contract.contract.Transact(opts, method, params...)
}

// ADMINROLE is a free data retrieval call binding the contract method 0x75b238fc.
//
// Solidity: function ADMIN_ROLE() view returns(bytes32)
func (_MainchainGateway *MainchainGatewayCaller) ADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _MainchainGateway.contract.Call(opts, &out, "ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ADMINROLE is a free data retrieval call binding the contract method 0x75b238fc.
//
// Solidity: function ADMIN_ROLE() view returns(bytes32)
func (_MainchainGateway *MainchainGatewaySession) ADMINROLE() ([32]byte, error) {
	return _MainchainGateway.Contract.ADMINROLE(&_MainchainGateway.CallOpts)
}

// ADMINROLE is a free data retrieval call binding the contract method 0x75b238fc.
//
// Solidity: function ADMIN_ROLE() view returns(bytes32)
func (_MainchainGateway *MainchainGatewayCallerSession) ADMINROLE() ([32]byte, error) {
	return _MainchainGateway.Contract.ADMINROLE(&_MainchainGateway.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_MainchainGateway *MainchainGatewayCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _MainchainGateway.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_MainchainGateway *MainchainGatewaySession) DEFAULTADMINROLE() ([32]byte, error) {
	return _MainchainGateway.Contract.DEFAULTADMINROLE(&_MainchainGateway.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_MainchainGateway *MainchainGatewayCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _MainchainGateway.Contract.DEFAULTADMINROLE(&_MainchainGateway.CallOpts)
}

// GetCrossbellToken is a free data retrieval call binding the contract method 0x4e207f62.
//
// Solidity: function getCrossbellToken(address mainchainToken) view returns((address,uint8) token)
func (_MainchainGateway *MainchainGatewayCaller) GetCrossbellToken(opts *bind.CallOpts, mainchainToken common.Address) (DataTypesMappedToken, error) {
	var out []interface{}
	err := _MainchainGateway.contract.Call(opts, &out, "getCrossbellToken", mainchainToken)

	if err != nil {
		return *new(DataTypesMappedToken), err
	}

	out0 := *abi.ConvertType(out[0], new(DataTypesMappedToken)).(*DataTypesMappedToken)

	return out0, err

}

// GetCrossbellToken is a free data retrieval call binding the contract method 0x4e207f62.
//
// Solidity: function getCrossbellToken(address mainchainToken) view returns((address,uint8) token)
func (_MainchainGateway *MainchainGatewaySession) GetCrossbellToken(mainchainToken common.Address) (DataTypesMappedToken, error) {
	return _MainchainGateway.Contract.GetCrossbellToken(&_MainchainGateway.CallOpts, mainchainToken)
}

// GetCrossbellToken is a free data retrieval call binding the contract method 0x4e207f62.
//
// Solidity: function getCrossbellToken(address mainchainToken) view returns((address,uint8) token)
func (_MainchainGateway *MainchainGatewayCallerSession) GetCrossbellToken(mainchainToken common.Address) (DataTypesMappedToken, error) {
	return _MainchainGateway.Contract.GetCrossbellToken(&_MainchainGateway.CallOpts, mainchainToken)
}

// GetDailyWithdrawalMaxQuota is a free data retrieval call binding the contract method 0xb368daa5.
//
// Solidity: function getDailyWithdrawalMaxQuota(address token) view returns(uint256)
func (_MainchainGateway *MainchainGatewayCaller) GetDailyWithdrawalMaxQuota(opts *bind.CallOpts, token common.Address) (*big.Int, error) {
	var out []interface{}
	err := _MainchainGateway.contract.Call(opts, &out, "getDailyWithdrawalMaxQuota", token)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetDailyWithdrawalMaxQuota is a free data retrieval call binding the contract method 0xb368daa5.
//
// Solidity: function getDailyWithdrawalMaxQuota(address token) view returns(uint256)
func (_MainchainGateway *MainchainGatewaySession) GetDailyWithdrawalMaxQuota(token common.Address) (*big.Int, error) {
	return _MainchainGateway.Contract.GetDailyWithdrawalMaxQuota(&_MainchainGateway.CallOpts, token)
}

// GetDailyWithdrawalMaxQuota is a free data retrieval call binding the contract method 0xb368daa5.
//
// Solidity: function getDailyWithdrawalMaxQuota(address token) view returns(uint256)
func (_MainchainGateway *MainchainGatewayCallerSession) GetDailyWithdrawalMaxQuota(token common.Address) (*big.Int, error) {
	return _MainchainGateway.Contract.GetDailyWithdrawalMaxQuota(&_MainchainGateway.CallOpts, token)
}

// GetDailyWithdrawalRemainingQuota is a free data retrieval call binding the contract method 0xabd5dd6d.
//
// Solidity: function getDailyWithdrawalRemainingQuota(address token) view returns(uint256)
func (_MainchainGateway *MainchainGatewayCaller) GetDailyWithdrawalRemainingQuota(opts *bind.CallOpts, token common.Address) (*big.Int, error) {
	var out []interface{}
	err := _MainchainGateway.contract.Call(opts, &out, "getDailyWithdrawalRemainingQuota", token)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetDailyWithdrawalRemainingQuota is a free data retrieval call binding the contract method 0xabd5dd6d.
//
// Solidity: function getDailyWithdrawalRemainingQuota(address token) view returns(uint256)
func (_MainchainGateway *MainchainGatewaySession) GetDailyWithdrawalRemainingQuota(token common.Address) (*big.Int, error) {
	return _MainchainGateway.Contract.GetDailyWithdrawalRemainingQuota(&_MainchainGateway.CallOpts, token)
}

// GetDailyWithdrawalRemainingQuota is a free data retrieval call binding the contract method 0xabd5dd6d.
//
// Solidity: function getDailyWithdrawalRemainingQuota(address token) view returns(uint256)
func (_MainchainGateway *MainchainGatewayCallerSession) GetDailyWithdrawalRemainingQuota(token common.Address) (*big.Int, error) {
	return _MainchainGateway.Contract.GetDailyWithdrawalRemainingQuota(&_MainchainGateway.CallOpts, token)
}

// GetDepositCount is a free data retrieval call binding the contract method 0x9363a141.
//
// Solidity: function getDepositCount() view returns(uint256)
func (_MainchainGateway *MainchainGatewayCaller) GetDepositCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MainchainGateway.contract.Call(opts, &out, "getDepositCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetDepositCount is a free data retrieval call binding the contract method 0x9363a141.
//
// Solidity: function getDepositCount() view returns(uint256)
func (_MainchainGateway *MainchainGatewaySession) GetDepositCount() (*big.Int, error) {
	return _MainchainGateway.Contract.GetDepositCount(&_MainchainGateway.CallOpts)
}

// GetDepositCount is a free data retrieval call binding the contract method 0x9363a141.
//
// Solidity: function getDepositCount() view returns(uint256)
func (_MainchainGateway *MainchainGatewayCallerSession) GetDepositCount() (*big.Int, error) {
	return _MainchainGateway.Contract.GetDepositCount(&_MainchainGateway.CallOpts)
}

// GetDomainSeparator is a free data retrieval call binding the contract method 0xed24911d.
//
// Solidity: function getDomainSeparator() view returns(bytes32)
func (_MainchainGateway *MainchainGatewayCaller) GetDomainSeparator(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _MainchainGateway.contract.Call(opts, &out, "getDomainSeparator")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetDomainSeparator is a free data retrieval call binding the contract method 0xed24911d.
//
// Solidity: function getDomainSeparator() view returns(bytes32)
func (_MainchainGateway *MainchainGatewaySession) GetDomainSeparator() ([32]byte, error) {
	return _MainchainGateway.Contract.GetDomainSeparator(&_MainchainGateway.CallOpts)
}

// GetDomainSeparator is a free data retrieval call binding the contract method 0xed24911d.
//
// Solidity: function getDomainSeparator() view returns(bytes32)
func (_MainchainGateway *MainchainGatewayCallerSession) GetDomainSeparator() ([32]byte, error) {
	return _MainchainGateway.Contract.GetDomainSeparator(&_MainchainGateway.CallOpts)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_MainchainGateway *MainchainGatewayCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _MainchainGateway.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_MainchainGateway *MainchainGatewaySession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _MainchainGateway.Contract.GetRoleAdmin(&_MainchainGateway.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_MainchainGateway *MainchainGatewayCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _MainchainGateway.Contract.GetRoleAdmin(&_MainchainGateway.CallOpts, role)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_MainchainGateway *MainchainGatewayCaller) GetRoleMember(opts *bind.CallOpts, role [32]byte, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _MainchainGateway.contract.Call(opts, &out, "getRoleMember", role, index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_MainchainGateway *MainchainGatewaySession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _MainchainGateway.Contract.GetRoleMember(&_MainchainGateway.CallOpts, role, index)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_MainchainGateway *MainchainGatewayCallerSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _MainchainGateway.Contract.GetRoleMember(&_MainchainGateway.CallOpts, role, index)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_MainchainGateway *MainchainGatewayCaller) GetRoleMemberCount(opts *bind.CallOpts, role [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _MainchainGateway.contract.Call(opts, &out, "getRoleMemberCount", role)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_MainchainGateway *MainchainGatewaySession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _MainchainGateway.Contract.GetRoleMemberCount(&_MainchainGateway.CallOpts, role)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_MainchainGateway *MainchainGatewayCallerSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _MainchainGateway.Contract.GetRoleMemberCount(&_MainchainGateway.CallOpts, role)
}

// GetValidatorContract is a free data retrieval call binding the contract method 0x6f94c5e9.
//
// Solidity: function getValidatorContract() view returns(address)
func (_MainchainGateway *MainchainGatewayCaller) GetValidatorContract(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MainchainGateway.contract.Call(opts, &out, "getValidatorContract")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetValidatorContract is a free data retrieval call binding the contract method 0x6f94c5e9.
//
// Solidity: function getValidatorContract() view returns(address)
func (_MainchainGateway *MainchainGatewaySession) GetValidatorContract() (common.Address, error) {
	return _MainchainGateway.Contract.GetValidatorContract(&_MainchainGateway.CallOpts)
}

// GetValidatorContract is a free data retrieval call binding the contract method 0x6f94c5e9.
//
// Solidity: function getValidatorContract() view returns(address)
func (_MainchainGateway *MainchainGatewayCallerSession) GetValidatorContract() (common.Address, error) {
	return _MainchainGateway.Contract.GetValidatorContract(&_MainchainGateway.CallOpts)
}

// GetWithdrawalHash is a free data retrieval call binding the contract method 0xec20ce98.
//
// Solidity: function getWithdrawalHash(uint256 withdrawalId) view returns(bytes32)
func (_MainchainGateway *MainchainGatewayCaller) GetWithdrawalHash(opts *bind.CallOpts, withdrawalId *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _MainchainGateway.contract.Call(opts, &out, "getWithdrawalHash", withdrawalId)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetWithdrawalHash is a free data retrieval call binding the contract method 0xec20ce98.
//
// Solidity: function getWithdrawalHash(uint256 withdrawalId) view returns(bytes32)
func (_MainchainGateway *MainchainGatewaySession) GetWithdrawalHash(withdrawalId *big.Int) ([32]byte, error) {
	return _MainchainGateway.Contract.GetWithdrawalHash(&_MainchainGateway.CallOpts, withdrawalId)
}

// GetWithdrawalHash is a free data retrieval call binding the contract method 0xec20ce98.
//
// Solidity: function getWithdrawalHash(uint256 withdrawalId) view returns(bytes32)
func (_MainchainGateway *MainchainGatewayCallerSession) GetWithdrawalHash(withdrawalId *big.Int) ([32]byte, error) {
	return _MainchainGateway.Contract.GetWithdrawalHash(&_MainchainGateway.CallOpts, withdrawalId)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_MainchainGateway *MainchainGatewayCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _MainchainGateway.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_MainchainGateway *MainchainGatewaySession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _MainchainGateway.Contract.HasRole(&_MainchainGateway.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_MainchainGateway *MainchainGatewayCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _MainchainGateway.Contract.HasRole(&_MainchainGateway.CallOpts, role, account)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_MainchainGateway *MainchainGatewayCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _MainchainGateway.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_MainchainGateway *MainchainGatewaySession) Paused() (bool, error) {
	return _MainchainGateway.Contract.Paused(&_MainchainGateway.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_MainchainGateway *MainchainGatewayCallerSession) Paused() (bool, error) {
	return _MainchainGateway.Contract.Paused(&_MainchainGateway.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_MainchainGateway *MainchainGatewayCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _MainchainGateway.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_MainchainGateway *MainchainGatewaySession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _MainchainGateway.Contract.SupportsInterface(&_MainchainGateway.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_MainchainGateway *MainchainGatewayCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _MainchainGateway.Contract.SupportsInterface(&_MainchainGateway.CallOpts, interfaceId)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_MainchainGateway *MainchainGatewayTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _MainchainGateway.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_MainchainGateway *MainchainGatewaySession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _MainchainGateway.Contract.GrantRole(&_MainchainGateway.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_MainchainGateway *MainchainGatewayTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _MainchainGateway.Contract.GrantRole(&_MainchainGateway.TransactOpts, role, account)
}

// Initialize is a paid mutator transaction binding the contract method 0xa26b2906.
//
// Solidity: function initialize(address validator, address admin, address[] mainchainTokens, uint256[] dailyWithdrawalMaxQuota, address[] crossbellTokens, uint8[] crossbellTokenDecimals) returns()
func (_MainchainGateway *MainchainGatewayTransactor) Initialize(opts *bind.TransactOpts, validator common.Address, admin common.Address, mainchainTokens []common.Address, dailyWithdrawalMaxQuota []*big.Int, crossbellTokens []common.Address, crossbellTokenDecimals []uint8) (*types.Transaction, error) {
	return _MainchainGateway.contract.Transact(opts, "initialize", validator, admin, mainchainTokens, dailyWithdrawalMaxQuota, crossbellTokens, crossbellTokenDecimals)
}

// Initialize is a paid mutator transaction binding the contract method 0xa26b2906.
//
// Solidity: function initialize(address validator, address admin, address[] mainchainTokens, uint256[] dailyWithdrawalMaxQuota, address[] crossbellTokens, uint8[] crossbellTokenDecimals) returns()
func (_MainchainGateway *MainchainGatewaySession) Initialize(validator common.Address, admin common.Address, mainchainTokens []common.Address, dailyWithdrawalMaxQuota []*big.Int, crossbellTokens []common.Address, crossbellTokenDecimals []uint8) (*types.Transaction, error) {
	return _MainchainGateway.Contract.Initialize(&_MainchainGateway.TransactOpts, validator, admin, mainchainTokens, dailyWithdrawalMaxQuota, crossbellTokens, crossbellTokenDecimals)
}

// Initialize is a paid mutator transaction binding the contract method 0xa26b2906.
//
// Solidity: function initialize(address validator, address admin, address[] mainchainTokens, uint256[] dailyWithdrawalMaxQuota, address[] crossbellTokens, uint8[] crossbellTokenDecimals) returns()
func (_MainchainGateway *MainchainGatewayTransactorSession) Initialize(validator common.Address, admin common.Address, mainchainTokens []common.Address, dailyWithdrawalMaxQuota []*big.Int, crossbellTokens []common.Address, crossbellTokenDecimals []uint8) (*types.Transaction, error) {
	return _MainchainGateway.Contract.Initialize(&_MainchainGateway.TransactOpts, validator, admin, mainchainTokens, dailyWithdrawalMaxQuota, crossbellTokens, crossbellTokenDecimals)
}

// MapTokens is a paid mutator transaction binding the contract method 0x1b6e7594.
//
// Solidity: function mapTokens(address[] mainchainTokens, address[] crossbellTokens, uint8[] crossbellTokenDecimals) returns()
func (_MainchainGateway *MainchainGatewayTransactor) MapTokens(opts *bind.TransactOpts, mainchainTokens []common.Address, crossbellTokens []common.Address, crossbellTokenDecimals []uint8) (*types.Transaction, error) {
	return _MainchainGateway.contract.Transact(opts, "mapTokens", mainchainTokens, crossbellTokens, crossbellTokenDecimals)
}

// MapTokens is a paid mutator transaction binding the contract method 0x1b6e7594.
//
// Solidity: function mapTokens(address[] mainchainTokens, address[] crossbellTokens, uint8[] crossbellTokenDecimals) returns()
func (_MainchainGateway *MainchainGatewaySession) MapTokens(mainchainTokens []common.Address, crossbellTokens []common.Address, crossbellTokenDecimals []uint8) (*types.Transaction, error) {
	return _MainchainGateway.Contract.MapTokens(&_MainchainGateway.TransactOpts, mainchainTokens, crossbellTokens, crossbellTokenDecimals)
}

// MapTokens is a paid mutator transaction binding the contract method 0x1b6e7594.
//
// Solidity: function mapTokens(address[] mainchainTokens, address[] crossbellTokens, uint8[] crossbellTokenDecimals) returns()
func (_MainchainGateway *MainchainGatewayTransactorSession) MapTokens(mainchainTokens []common.Address, crossbellTokens []common.Address, crossbellTokenDecimals []uint8) (*types.Transaction, error) {
	return _MainchainGateway.Contract.MapTokens(&_MainchainGateway.TransactOpts, mainchainTokens, crossbellTokens, crossbellTokenDecimals)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_MainchainGateway *MainchainGatewayTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MainchainGateway.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_MainchainGateway *MainchainGatewaySession) Pause() (*types.Transaction, error) {
	return _MainchainGateway.Contract.Pause(&_MainchainGateway.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_MainchainGateway *MainchainGatewayTransactorSession) Pause() (*types.Transaction, error) {
	return _MainchainGateway.Contract.Pause(&_MainchainGateway.TransactOpts)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_MainchainGateway *MainchainGatewayTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _MainchainGateway.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_MainchainGateway *MainchainGatewaySession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _MainchainGateway.Contract.RenounceRole(&_MainchainGateway.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_MainchainGateway *MainchainGatewayTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _MainchainGateway.Contract.RenounceRole(&_MainchainGateway.TransactOpts, role, account)
}

// RequestDeposit is a paid mutator transaction binding the contract method 0x2a9fdb6f.
//
// Solidity: function requestDeposit(address recipient, address token, uint256 amount) returns(uint256 depositId)
func (_MainchainGateway *MainchainGatewayTransactor) RequestDeposit(opts *bind.TransactOpts, recipient common.Address, token common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MainchainGateway.contract.Transact(opts, "requestDeposit", recipient, token, amount)
}

// RequestDeposit is a paid mutator transaction binding the contract method 0x2a9fdb6f.
//
// Solidity: function requestDeposit(address recipient, address token, uint256 amount) returns(uint256 depositId)
func (_MainchainGateway *MainchainGatewaySession) RequestDeposit(recipient common.Address, token common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MainchainGateway.Contract.RequestDeposit(&_MainchainGateway.TransactOpts, recipient, token, amount)
}

// RequestDeposit is a paid mutator transaction binding the contract method 0x2a9fdb6f.
//
// Solidity: function requestDeposit(address recipient, address token, uint256 amount) returns(uint256 depositId)
func (_MainchainGateway *MainchainGatewayTransactorSession) RequestDeposit(recipient common.Address, token common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MainchainGateway.Contract.RequestDeposit(&_MainchainGateway.TransactOpts, recipient, token, amount)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_MainchainGateway *MainchainGatewayTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _MainchainGateway.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_MainchainGateway *MainchainGatewaySession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _MainchainGateway.Contract.RevokeRole(&_MainchainGateway.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_MainchainGateway *MainchainGatewayTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _MainchainGateway.Contract.RevokeRole(&_MainchainGateway.TransactOpts, role, account)
}

// SetDailyWithdrawalMaxQuotas is a paid mutator transaction binding the contract method 0x72bc707c.
//
// Solidity: function setDailyWithdrawalMaxQuotas(address[] tokens, uint256[] quotas) returns()
func (_MainchainGateway *MainchainGatewayTransactor) SetDailyWithdrawalMaxQuotas(opts *bind.TransactOpts, tokens []common.Address, quotas []*big.Int) (*types.Transaction, error) {
	return _MainchainGateway.contract.Transact(opts, "setDailyWithdrawalMaxQuotas", tokens, quotas)
}

// SetDailyWithdrawalMaxQuotas is a paid mutator transaction binding the contract method 0x72bc707c.
//
// Solidity: function setDailyWithdrawalMaxQuotas(address[] tokens, uint256[] quotas) returns()
func (_MainchainGateway *MainchainGatewaySession) SetDailyWithdrawalMaxQuotas(tokens []common.Address, quotas []*big.Int) (*types.Transaction, error) {
	return _MainchainGateway.Contract.SetDailyWithdrawalMaxQuotas(&_MainchainGateway.TransactOpts, tokens, quotas)
}

// SetDailyWithdrawalMaxQuotas is a paid mutator transaction binding the contract method 0x72bc707c.
//
// Solidity: function setDailyWithdrawalMaxQuotas(address[] tokens, uint256[] quotas) returns()
func (_MainchainGateway *MainchainGatewayTransactorSession) SetDailyWithdrawalMaxQuotas(tokens []common.Address, quotas []*big.Int) (*types.Transaction, error) {
	return _MainchainGateway.Contract.SetDailyWithdrawalMaxQuotas(&_MainchainGateway.TransactOpts, tokens, quotas)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_MainchainGateway *MainchainGatewayTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MainchainGateway.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_MainchainGateway *MainchainGatewaySession) Unpause() (*types.Transaction, error) {
	return _MainchainGateway.Contract.Unpause(&_MainchainGateway.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_MainchainGateway *MainchainGatewayTransactorSession) Unpause() (*types.Transaction, error) {
	return _MainchainGateway.Contract.Unpause(&_MainchainGateway.TransactOpts)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2d8c9731.
//
// Solidity: function withdraw(uint256 chainId, uint256 withdrawalId, address recipient, address token, uint256 amount, uint256 fee, (uint8,bytes32,bytes32)[] signatures) returns()
func (_MainchainGateway *MainchainGatewayTransactor) Withdraw(opts *bind.TransactOpts, chainId *big.Int, withdrawalId *big.Int, recipient common.Address, token common.Address, amount *big.Int, fee *big.Int, signatures []DataTypesSignature) (*types.Transaction, error) {
	return _MainchainGateway.contract.Transact(opts, "withdraw", chainId, withdrawalId, recipient, token, amount, fee, signatures)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2d8c9731.
//
// Solidity: function withdraw(uint256 chainId, uint256 withdrawalId, address recipient, address token, uint256 amount, uint256 fee, (uint8,bytes32,bytes32)[] signatures) returns()
func (_MainchainGateway *MainchainGatewaySession) Withdraw(chainId *big.Int, withdrawalId *big.Int, recipient common.Address, token common.Address, amount *big.Int, fee *big.Int, signatures []DataTypesSignature) (*types.Transaction, error) {
	return _MainchainGateway.Contract.Withdraw(&_MainchainGateway.TransactOpts, chainId, withdrawalId, recipient, token, amount, fee, signatures)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2d8c9731.
//
// Solidity: function withdraw(uint256 chainId, uint256 withdrawalId, address recipient, address token, uint256 amount, uint256 fee, (uint8,bytes32,bytes32)[] signatures) returns()
func (_MainchainGateway *MainchainGatewayTransactorSession) Withdraw(chainId *big.Int, withdrawalId *big.Int, recipient common.Address, token common.Address, amount *big.Int, fee *big.Int, signatures []DataTypesSignature) (*types.Transaction, error) {
	return _MainchainGateway.Contract.Withdraw(&_MainchainGateway.TransactOpts, chainId, withdrawalId, recipient, token, amount, fee, signatures)
}

// MainchainGatewayDailyWithdrawalMaxQuotasUpdatedIterator is returned from FilterDailyWithdrawalMaxQuotasUpdated and is used to iterate over the raw logs and unpacked data for DailyWithdrawalMaxQuotasUpdated events raised by the MainchainGateway contract.
type MainchainGatewayDailyWithdrawalMaxQuotasUpdatedIterator struct {
	Event *MainchainGatewayDailyWithdrawalMaxQuotasUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MainchainGatewayDailyWithdrawalMaxQuotasUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MainchainGatewayDailyWithdrawalMaxQuotasUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MainchainGatewayDailyWithdrawalMaxQuotasUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MainchainGatewayDailyWithdrawalMaxQuotasUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MainchainGatewayDailyWithdrawalMaxQuotasUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MainchainGatewayDailyWithdrawalMaxQuotasUpdated represents a DailyWithdrawalMaxQuotasUpdated event raised by the MainchainGateway contract.
type MainchainGatewayDailyWithdrawalMaxQuotasUpdated struct {
	Tokens []common.Address
	Quotas []*big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterDailyWithdrawalMaxQuotasUpdated is a free log retrieval operation binding the contract event 0x45a5bd79aaf299411b8b054095f05ebb133bccc05e745fd2f3ed6d1dbcbef656.
//
// Solidity: event DailyWithdrawalMaxQuotasUpdated(address[] tokens, uint256[] quotas)
func (_MainchainGateway *MainchainGatewayFilterer) FilterDailyWithdrawalMaxQuotasUpdated(opts *bind.FilterOpts) (*MainchainGatewayDailyWithdrawalMaxQuotasUpdatedIterator, error) {

	logs, sub, err := _MainchainGateway.contract.FilterLogs(opts, "DailyWithdrawalMaxQuotasUpdated")
	if err != nil {
		return nil, err
	}
	return &MainchainGatewayDailyWithdrawalMaxQuotasUpdatedIterator{contract: _MainchainGateway.contract, event: "DailyWithdrawalMaxQuotasUpdated", logs: logs, sub: sub}, nil
}

// WatchDailyWithdrawalMaxQuotasUpdated is a free log subscription operation binding the contract event 0x45a5bd79aaf299411b8b054095f05ebb133bccc05e745fd2f3ed6d1dbcbef656.
//
// Solidity: event DailyWithdrawalMaxQuotasUpdated(address[] tokens, uint256[] quotas)
func (_MainchainGateway *MainchainGatewayFilterer) WatchDailyWithdrawalMaxQuotasUpdated(opts *bind.WatchOpts, sink chan<- *MainchainGatewayDailyWithdrawalMaxQuotasUpdated) (event.Subscription, error) {

	logs, sub, err := _MainchainGateway.contract.WatchLogs(opts, "DailyWithdrawalMaxQuotasUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MainchainGatewayDailyWithdrawalMaxQuotasUpdated)
				if err := _MainchainGateway.contract.UnpackLog(event, "DailyWithdrawalMaxQuotasUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDailyWithdrawalMaxQuotasUpdated is a log parse operation binding the contract event 0x45a5bd79aaf299411b8b054095f05ebb133bccc05e745fd2f3ed6d1dbcbef656.
//
// Solidity: event DailyWithdrawalMaxQuotasUpdated(address[] tokens, uint256[] quotas)
func (_MainchainGateway *MainchainGatewayFilterer) ParseDailyWithdrawalMaxQuotasUpdated(log types.Log) (*MainchainGatewayDailyWithdrawalMaxQuotasUpdated, error) {
	event := new(MainchainGatewayDailyWithdrawalMaxQuotasUpdated)
	if err := _MainchainGateway.contract.UnpackLog(event, "DailyWithdrawalMaxQuotasUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MainchainGatewayInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the MainchainGateway contract.
type MainchainGatewayInitializedIterator struct {
	Event *MainchainGatewayInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MainchainGatewayInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MainchainGatewayInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MainchainGatewayInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MainchainGatewayInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MainchainGatewayInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MainchainGatewayInitialized represents a Initialized event raised by the MainchainGateway contract.
type MainchainGatewayInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_MainchainGateway *MainchainGatewayFilterer) FilterInitialized(opts *bind.FilterOpts) (*MainchainGatewayInitializedIterator, error) {

	logs, sub, err := _MainchainGateway.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &MainchainGatewayInitializedIterator{contract: _MainchainGateway.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_MainchainGateway *MainchainGatewayFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *MainchainGatewayInitialized) (event.Subscription, error) {

	logs, sub, err := _MainchainGateway.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MainchainGatewayInitialized)
				if err := _MainchainGateway.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_MainchainGateway *MainchainGatewayFilterer) ParseInitialized(log types.Log) (*MainchainGatewayInitialized, error) {
	event := new(MainchainGatewayInitialized)
	if err := _MainchainGateway.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MainchainGatewayPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the MainchainGateway contract.
type MainchainGatewayPausedIterator struct {
	Event *MainchainGatewayPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MainchainGatewayPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MainchainGatewayPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MainchainGatewayPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MainchainGatewayPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MainchainGatewayPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MainchainGatewayPaused represents a Paused event raised by the MainchainGateway contract.
type MainchainGatewayPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_MainchainGateway *MainchainGatewayFilterer) FilterPaused(opts *bind.FilterOpts) (*MainchainGatewayPausedIterator, error) {

	logs, sub, err := _MainchainGateway.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &MainchainGatewayPausedIterator{contract: _MainchainGateway.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_MainchainGateway *MainchainGatewayFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *MainchainGatewayPaused) (event.Subscription, error) {

	logs, sub, err := _MainchainGateway.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MainchainGatewayPaused)
				if err := _MainchainGateway.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_MainchainGateway *MainchainGatewayFilterer) ParsePaused(log types.Log) (*MainchainGatewayPaused, error) {
	event := new(MainchainGatewayPaused)
	if err := _MainchainGateway.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MainchainGatewayRequestDepositIterator is returned from FilterRequestDeposit and is used to iterate over the raw logs and unpacked data for RequestDeposit events raised by the MainchainGateway contract.
type MainchainGatewayRequestDepositIterator struct {
	Event *MainchainGatewayRequestDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MainchainGatewayRequestDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MainchainGatewayRequestDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MainchainGatewayRequestDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MainchainGatewayRequestDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MainchainGatewayRequestDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MainchainGatewayRequestDeposit represents a RequestDeposit event raised by the MainchainGateway contract.
type MainchainGatewayRequestDeposit struct {
	ChainId     *big.Int
	DepositId   *big.Int
	Recipient   common.Address
	Token       common.Address
	Amount      *big.Int
	DepositHash [32]byte
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRequestDeposit is a free log retrieval operation binding the contract event 0xff75133ac9053ca6fbd0c66c2baa995eccf6af80a2443af16f843ef3766b773a.
//
// Solidity: event RequestDeposit(uint256 indexed chainId, uint256 indexed depositId, address indexed recipient, address token, uint256 amount, bytes32 depositHash)
func (_MainchainGateway *MainchainGatewayFilterer) FilterRequestDeposit(opts *bind.FilterOpts, chainId []*big.Int, depositId []*big.Int, recipient []common.Address) (*MainchainGatewayRequestDepositIterator, error) {

	var chainIdRule []interface{}
	for _, chainIdItem := range chainId {
		chainIdRule = append(chainIdRule, chainIdItem)
	}
	var depositIdRule []interface{}
	for _, depositIdItem := range depositId {
		depositIdRule = append(depositIdRule, depositIdItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _MainchainGateway.contract.FilterLogs(opts, "RequestDeposit", chainIdRule, depositIdRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return &MainchainGatewayRequestDepositIterator{contract: _MainchainGateway.contract, event: "RequestDeposit", logs: logs, sub: sub}, nil
}

// WatchRequestDeposit is a free log subscription operation binding the contract event 0xff75133ac9053ca6fbd0c66c2baa995eccf6af80a2443af16f843ef3766b773a.
//
// Solidity: event RequestDeposit(uint256 indexed chainId, uint256 indexed depositId, address indexed recipient, address token, uint256 amount, bytes32 depositHash)
func (_MainchainGateway *MainchainGatewayFilterer) WatchRequestDeposit(opts *bind.WatchOpts, sink chan<- *MainchainGatewayRequestDeposit, chainId []*big.Int, depositId []*big.Int, recipient []common.Address) (event.Subscription, error) {

	var chainIdRule []interface{}
	for _, chainIdItem := range chainId {
		chainIdRule = append(chainIdRule, chainIdItem)
	}
	var depositIdRule []interface{}
	for _, depositIdItem := range depositId {
		depositIdRule = append(depositIdRule, depositIdItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _MainchainGateway.contract.WatchLogs(opts, "RequestDeposit", chainIdRule, depositIdRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MainchainGatewayRequestDeposit)
				if err := _MainchainGateway.contract.UnpackLog(event, "RequestDeposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRequestDeposit is a log parse operation binding the contract event 0xff75133ac9053ca6fbd0c66c2baa995eccf6af80a2443af16f843ef3766b773a.
//
// Solidity: event RequestDeposit(uint256 indexed chainId, uint256 indexed depositId, address indexed recipient, address token, uint256 amount, bytes32 depositHash)
func (_MainchainGateway *MainchainGatewayFilterer) ParseRequestDeposit(log types.Log) (*MainchainGatewayRequestDeposit, error) {
	event := new(MainchainGatewayRequestDeposit)
	if err := _MainchainGateway.contract.UnpackLog(event, "RequestDeposit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MainchainGatewayRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the MainchainGateway contract.
type MainchainGatewayRoleAdminChangedIterator struct {
	Event *MainchainGatewayRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MainchainGatewayRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MainchainGatewayRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MainchainGatewayRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MainchainGatewayRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MainchainGatewayRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MainchainGatewayRoleAdminChanged represents a RoleAdminChanged event raised by the MainchainGateway contract.
type MainchainGatewayRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_MainchainGateway *MainchainGatewayFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*MainchainGatewayRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _MainchainGateway.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &MainchainGatewayRoleAdminChangedIterator{contract: _MainchainGateway.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_MainchainGateway *MainchainGatewayFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *MainchainGatewayRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _MainchainGateway.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MainchainGatewayRoleAdminChanged)
				if err := _MainchainGateway.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_MainchainGateway *MainchainGatewayFilterer) ParseRoleAdminChanged(log types.Log) (*MainchainGatewayRoleAdminChanged, error) {
	event := new(MainchainGatewayRoleAdminChanged)
	if err := _MainchainGateway.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MainchainGatewayRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the MainchainGateway contract.
type MainchainGatewayRoleGrantedIterator struct {
	Event *MainchainGatewayRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MainchainGatewayRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MainchainGatewayRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MainchainGatewayRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MainchainGatewayRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MainchainGatewayRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MainchainGatewayRoleGranted represents a RoleGranted event raised by the MainchainGateway contract.
type MainchainGatewayRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_MainchainGateway *MainchainGatewayFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*MainchainGatewayRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _MainchainGateway.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &MainchainGatewayRoleGrantedIterator{contract: _MainchainGateway.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_MainchainGateway *MainchainGatewayFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *MainchainGatewayRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _MainchainGateway.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MainchainGatewayRoleGranted)
				if err := _MainchainGateway.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_MainchainGateway *MainchainGatewayFilterer) ParseRoleGranted(log types.Log) (*MainchainGatewayRoleGranted, error) {
	event := new(MainchainGatewayRoleGranted)
	if err := _MainchainGateway.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MainchainGatewayRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the MainchainGateway contract.
type MainchainGatewayRoleRevokedIterator struct {
	Event *MainchainGatewayRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MainchainGatewayRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MainchainGatewayRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MainchainGatewayRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MainchainGatewayRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MainchainGatewayRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MainchainGatewayRoleRevoked represents a RoleRevoked event raised by the MainchainGateway contract.
type MainchainGatewayRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_MainchainGateway *MainchainGatewayFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*MainchainGatewayRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _MainchainGateway.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &MainchainGatewayRoleRevokedIterator{contract: _MainchainGateway.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_MainchainGateway *MainchainGatewayFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *MainchainGatewayRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _MainchainGateway.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MainchainGatewayRoleRevoked)
				if err := _MainchainGateway.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_MainchainGateway *MainchainGatewayFilterer) ParseRoleRevoked(log types.Log) (*MainchainGatewayRoleRevoked, error) {
	event := new(MainchainGatewayRoleRevoked)
	if err := _MainchainGateway.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MainchainGatewayTokenMappedIterator is returned from FilterTokenMapped and is used to iterate over the raw logs and unpacked data for TokenMapped events raised by the MainchainGateway contract.
type MainchainGatewayTokenMappedIterator struct {
	Event *MainchainGatewayTokenMapped // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MainchainGatewayTokenMappedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MainchainGatewayTokenMapped)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MainchainGatewayTokenMapped)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MainchainGatewayTokenMappedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MainchainGatewayTokenMappedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MainchainGatewayTokenMapped represents a TokenMapped event raised by the MainchainGateway contract.
type MainchainGatewayTokenMapped struct {
	MainchainTokens        []common.Address
	CrossbellTokens        []common.Address
	CrossbellTokenDecimals []uint8
	Raw                    types.Log // Blockchain specific contextual infos
}

// FilterTokenMapped is a free log retrieval operation binding the contract event 0xa4f03cc9c0e0aeb5b71b4ec800702753f65748c2cf3064695ba8e8b46be70444.
//
// Solidity: event TokenMapped(address[] mainchainTokens, address[] crossbellTokens, uint8[] crossbellTokenDecimals)
func (_MainchainGateway *MainchainGatewayFilterer) FilterTokenMapped(opts *bind.FilterOpts) (*MainchainGatewayTokenMappedIterator, error) {

	logs, sub, err := _MainchainGateway.contract.FilterLogs(opts, "TokenMapped")
	if err != nil {
		return nil, err
	}
	return &MainchainGatewayTokenMappedIterator{contract: _MainchainGateway.contract, event: "TokenMapped", logs: logs, sub: sub}, nil
}

// WatchTokenMapped is a free log subscription operation binding the contract event 0xa4f03cc9c0e0aeb5b71b4ec800702753f65748c2cf3064695ba8e8b46be70444.
//
// Solidity: event TokenMapped(address[] mainchainTokens, address[] crossbellTokens, uint8[] crossbellTokenDecimals)
func (_MainchainGateway *MainchainGatewayFilterer) WatchTokenMapped(opts *bind.WatchOpts, sink chan<- *MainchainGatewayTokenMapped) (event.Subscription, error) {

	logs, sub, err := _MainchainGateway.contract.WatchLogs(opts, "TokenMapped")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MainchainGatewayTokenMapped)
				if err := _MainchainGateway.contract.UnpackLog(event, "TokenMapped", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTokenMapped is a log parse operation binding the contract event 0xa4f03cc9c0e0aeb5b71b4ec800702753f65748c2cf3064695ba8e8b46be70444.
//
// Solidity: event TokenMapped(address[] mainchainTokens, address[] crossbellTokens, uint8[] crossbellTokenDecimals)
func (_MainchainGateway *MainchainGatewayFilterer) ParseTokenMapped(log types.Log) (*MainchainGatewayTokenMapped, error) {
	event := new(MainchainGatewayTokenMapped)
	if err := _MainchainGateway.contract.UnpackLog(event, "TokenMapped", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MainchainGatewayUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the MainchainGateway contract.
type MainchainGatewayUnpausedIterator struct {
	Event *MainchainGatewayUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MainchainGatewayUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MainchainGatewayUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MainchainGatewayUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MainchainGatewayUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MainchainGatewayUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MainchainGatewayUnpaused represents a Unpaused event raised by the MainchainGateway contract.
type MainchainGatewayUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_MainchainGateway *MainchainGatewayFilterer) FilterUnpaused(opts *bind.FilterOpts) (*MainchainGatewayUnpausedIterator, error) {

	logs, sub, err := _MainchainGateway.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &MainchainGatewayUnpausedIterator{contract: _MainchainGateway.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_MainchainGateway *MainchainGatewayFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *MainchainGatewayUnpaused) (event.Subscription, error) {

	logs, sub, err := _MainchainGateway.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MainchainGatewayUnpaused)
				if err := _MainchainGateway.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_MainchainGateway *MainchainGatewayFilterer) ParseUnpaused(log types.Log) (*MainchainGatewayUnpaused, error) {
	event := new(MainchainGatewayUnpaused)
	if err := _MainchainGateway.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MainchainGatewayWithdrewIterator is returned from FilterWithdrew and is used to iterate over the raw logs and unpacked data for Withdrew events raised by the MainchainGateway contract.
type MainchainGatewayWithdrewIterator struct {
	Event *MainchainGatewayWithdrew // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MainchainGatewayWithdrewIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MainchainGatewayWithdrew)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MainchainGatewayWithdrew)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MainchainGatewayWithdrewIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MainchainGatewayWithdrewIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MainchainGatewayWithdrew represents a Withdrew event raised by the MainchainGateway contract.
type MainchainGatewayWithdrew struct {
	ChainId      *big.Int
	WithdrawalId *big.Int
	Recipient    common.Address
	Token        common.Address
	Amount       *big.Int
	Fee          *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterWithdrew is a free log retrieval operation binding the contract event 0xed817c2d779177ce2e9ac87382f2b4c9b66d4fd65ddaec2f77ac7919f3dd9034.
//
// Solidity: event Withdrew(uint256 indexed chainId, uint256 indexed withdrawalId, address indexed recipient, address token, uint256 amount, uint256 fee)
func (_MainchainGateway *MainchainGatewayFilterer) FilterWithdrew(opts *bind.FilterOpts, chainId []*big.Int, withdrawalId []*big.Int, recipient []common.Address) (*MainchainGatewayWithdrewIterator, error) {

	var chainIdRule []interface{}
	for _, chainIdItem := range chainId {
		chainIdRule = append(chainIdRule, chainIdItem)
	}
	var withdrawalIdRule []interface{}
	for _, withdrawalIdItem := range withdrawalId {
		withdrawalIdRule = append(withdrawalIdRule, withdrawalIdItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _MainchainGateway.contract.FilterLogs(opts, "Withdrew", chainIdRule, withdrawalIdRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return &MainchainGatewayWithdrewIterator{contract: _MainchainGateway.contract, event: "Withdrew", logs: logs, sub: sub}, nil
}

// WatchWithdrew is a free log subscription operation binding the contract event 0xed817c2d779177ce2e9ac87382f2b4c9b66d4fd65ddaec2f77ac7919f3dd9034.
//
// Solidity: event Withdrew(uint256 indexed chainId, uint256 indexed withdrawalId, address indexed recipient, address token, uint256 amount, uint256 fee)
func (_MainchainGateway *MainchainGatewayFilterer) WatchWithdrew(opts *bind.WatchOpts, sink chan<- *MainchainGatewayWithdrew, chainId []*big.Int, withdrawalId []*big.Int, recipient []common.Address) (event.Subscription, error) {

	var chainIdRule []interface{}
	for _, chainIdItem := range chainId {
		chainIdRule = append(chainIdRule, chainIdItem)
	}
	var withdrawalIdRule []interface{}
	for _, withdrawalIdItem := range withdrawalId {
		withdrawalIdRule = append(withdrawalIdRule, withdrawalIdItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _MainchainGateway.contract.WatchLogs(opts, "Withdrew", chainIdRule, withdrawalIdRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MainchainGatewayWithdrew)
				if err := _MainchainGateway.contract.UnpackLog(event, "Withdrew", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrew is a log parse operation binding the contract event 0xed817c2d779177ce2e9ac87382f2b4c9b66d4fd65ddaec2f77ac7919f3dd9034.
//
// Solidity: event Withdrew(uint256 indexed chainId, uint256 indexed withdrawalId, address indexed recipient, address token, uint256 amount, uint256 fee)
func (_MainchainGateway *MainchainGatewayFilterer) ParseWithdrew(log types.Log) (*MainchainGatewayWithdrew, error) {
	event := new(MainchainGatewayWithdrew)
	if err := _MainchainGateway.contract.UnpackLog(event, "Withdrew", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
